s3_base_url: https://repository.cloudifysource.org
s3_bucket_name: cloudify-release-eu
s3_bucket_directory: cloudify/blueprints
git_url: https://github.com/cloudify-community/cloudify-catalog
target_path: https://repository.cloudifysource.org/cloudify/blueprints
github_url: https://github.com/cloudify-community/cloudify-catalog/tree
raw_github_url: https://raw.githubusercontent.com/cloudify-community/cloudify-catalog

topics:
  - name: getting_started
    target_path: s3_json_file
    blueprints:
      - id: gen-ssh-cert-service-component
        name: Gen-SSH-Cert-Example
        path: getting_started/ssh_cert
        description: |
          This blueprint creates SSH key
      - id: ex4-nested-blueprint
        name: Service-Composition-Example
        path: getting_started/service_composition
        description: |
            Service Composition blueprint example - describes how to create relationship between independent services
            In this case we run the same web server and application from ex3 as an independent deployment
            and were adding an SSH certificate generator to that service.
            The example will also demonstrate how we can upload and instantiate all nested services on demand.
      - id: ex3-relationship-blueprint
        name: Relationship-Example
        path: getting_started/relationship
        description: |
            The relationship blueprint example - describes how to create dependencies between multiple node types resources
            In this case were adding a web application node (web calculator) that will be contained_in the http_web_server resource
            Note that the application is pulled from a git repository and can be easily modified to any other application as needed.
            See the app_scripts/create.sh to see how this is done.
            The webserver and application will run on the <manager host>:8000
      - id: ex2-node-type-blueprint
        name: Node-Types-Example
        path: getting_started/node_types
        description: |
            Node types blueprint example - describes how to map the lifecycle of simple resource.
            In this specific example we use an http daemon as the resource.
            The webserver/start.sh and stop.sh will be called to instantiate and decommission the service
            The web server will run on the <manager host>:8000
      - id: ex1-input-output-blueprint
        name: Input-Outputs-Example
        path: getting_started/input_outputs 
        description: | 
          Input and outputs - describing the most basic blueprint structure
      - id: Multi-Tier-Example
        name: Multi-Tier-Example
        path: getting_started/multi_tier
        description: |
          The multi tier blueprint example - describes how you can use the Cloudify TOSCA based DSL to model relationships between multiple node types. 
          We will use a multi tier topology of a classic web application
      - id: Nested-Example
        name: Nested-Example
        path: getting_started/nested
        description: |
          The nested blueprint example - describes how you can create a multi-tier or distributed service where each service will have an independent blueprint and lifecycle operation similar to the way micro-services works.
          We will illustrate how we can create a dependency and relationship between those services , pass inputs/output parameters etc.
  - name: certified_environments
    target_path: s3_json_file
    blueprints:
      - id: EnvironmentAWS
        name: EnvironmentAWS
        path: certified_environments/environments/aws
        description: Creating AWS environment
      - id: EksAWS
        name: EksAWS
        path: certified_environments/services/aws/eks
        description: Creating EKS service
      - id: MinikubeAWS
        name: MinikubeAWS
        path: certified_environments/services/aws/minikube
        description: Creating Minikube service
      - id: MinioAWS
        name: MinioAWS
        path: certified_environments/services/aws/minio
        description: Creating Minio service
      - id: PsqlAWS
        name: PsqlAWS
        path: certified_environments/services/aws/psql
        description: Creating PostgreSQL service
      - id: RdsPsqlAWS
        name: RdsPsqAWS
        path: certified_environments/services/aws/rds_psql
        description: Creating PostgreSQL on RDS service
      - id: S3AWS
        name: S3AWS
        path: certified_environments/services/aws/s3
        description: Creating S3 service
      - id: AksAzure
        name: AksAzure
        path: certified_environments/services/azure/aks
        description: Creating AKS service
      - id: MinikubeAzure
        name: MinikubeAzure
        path: certified_environments/services/azure/minikube
        description: Creating Minikube service
      - id: MinioAzure
        name: MinioAzure
        path: certified_environments/services/azure/minio
        description: Creating Minio service
      - id: PsqlAzure
        name: PsqlAzure
        path: certified_environments/services/azure/psql
        description: Creating PostgreSQL service
      - id: RdsPsqlAzure
        name: RdsPsqlAzure
        path: certified_environments/services/azure/rds_psql
        description: Creating PostgreSQL on RDS service
      - id: StorageAzure
        name: StorageAzure
        path: certified_environments/services/azure/storage
        description: Creating Storage service
      - id: EnvironmentAzure
        name: EnvironmentAzure
        path: certified_environments/environments/azure
        description: Creating Azure environment
  - name: aws_services
    target_path: s3_json_file
    blueprints:
      - id: DynamoDB
        name: DynamoDB
        path: aws/dynamodb
        description: Creating AWS DynamoDB table
      - id: EBS
        name: EBS
        path: aws/ebs
        description: Creating EBS volume
      - id: EC2
        name: EC2
        path: aws/ec2
        description: Creating generating SSH key, creating a KeyPair and provisioning an EC2 instance
      - id: EC2_WITH_EBS
        name: EC2-with-EBS
        path: aws/ec2_with_ebs
        description: Creating EC2 inside VPC and EBS
      - id: EC2_SPOT_INSTANCES
        name: EC2-on-spot-instances
        path: aws/ec2_spot_instances
        description: Creating EC2 Spot instance
      - id: ECS
        name: ECS
        path: aws/ecs
        description: Creating ECS
      - id: S3
        name: S3
        path: aws/s3
        description: Creating S3 Bucket
      - id: SNS
        name: SNS
        path: aws/sns
        description: Creating SNS
      - id: SQS
        name: SQS
        path: aws/sqs
        description: Creating SQS
  - name: azure_services
    target_path: s3_json_file
    blueprints:
      - id: deployment
        name: Deployment
        path: azure/deployment
        description: This blueprint creates a Linux instance on Microsoft Azure, along with necessary networking services and a public IP using an Azure ARM template (template.json).  The blueprint generates public and private SSH keys. A keypair (for SSH) is created, stored in the secret store, and attached to the provisioned instance, via the Azure template inputs.  If a secret with the same name(s) is present in the secret store, it is used.
      - id: instance
        name: Instance
        path: azure/instance
        description: This blueprint starts a Linux VM on Azure. It autogenerates an ssh keypair which it stores in the secret store.  It associates a public ip with the instance
      - id: loadbalance
        name: Loadbalance
        path: azure/lb
        description: This blueprint starts a Linux VM on Azure. It autogenerates an ssh keypair which it stores in the secret store.  It associates a public ip with the instance
      - id: storage
        name: Storage
        path: azure/storage
        description: This blueprint starts a Linux VM on Azure. It autogenerates an ssh keypair which it stores in the secret store.  It associates a public ip with the instance
  - name: terraform_services
    target_path: s3_json_file
    blueprints:
      - id: terraform_azure_vm
        name: Azure-VM
        path: terraform/azure
        description: Create an Azure VM using Terraform automation
      - id: terraform_gcp_vm
        name: Google-Cloud-VM
        path: terraform/gcp
        description: Create a GCP VM using Terraform automation
      - id: terraform_openstack_vm
        name: OpenStack-VM
        path: terraform/openstack
        description: Create an OpenStack VM using Terraform automation
      - id: terraform_aws_vm
        name: AWS-VM
        path: terraform/aws
        description: Create an AWS VM using Terraform automation
      - id: terraform_tfc
        name: Terraform-Cloud-Enterprise
        path: terraform/tfc
        description: Install Terraform Cloud/Enterprise example
  - name: helm_services
    target_path: s3_json_file
    blueprints:
      - id: Wordpress
        name: Wordpress
        path: helm/wordpress
        description: Installing Wordpress helm chart on top of K8s cluster
      - id: Drupal
        name: Drupal
        path: helm/drupal
        description: Installing Drupal helm chart on top of K8s cluster
      - id: NodeJS
        name: NodeJS
        path: helm/nodejs
        description: Installing NodeJS helm chart on top of K8s cluster
  - name: K8S
    target_path: s3_json_file
    blueprints:
      - id: Kubernetes_AWS_EKS
        name: Kubernetes-on-AWS-EKS
        path: kubernetes/eks
        description: Setup a Kubernetes cluster in AWS leveraging EKS
      - id: Kubernetes_Azure_AKS
        name: Kubernetes-on-Azure-AKS
        path: kubernetes/aks
        description: Setup a Kubernetes cluster in Azure leveraging AKS
      - id: Kubernetes_GCP_GKE
        name: Kubernetes-on-GCP-GKE
        path: kubernetes/gke
        description: Setup a Kubernetes cluster in GCP leveraging GKE
  - name: K8S_Discovery
    target_path: s3_json_file
    blueprints:
      - id: aws_account
        name: AWS-Account
        path: k8s_discovery/aws/aws-account
        description: AWS Account Representation
      - id: azure_account
        name: Azure-account
        path: k8s_discovery/azure/azure-account
        description: Azure Account Representation
      - id: gcp-account
        name: GCP-Account
        path: k8s_discovery/gcp/gcp-account
        description: GCP Account Representation



