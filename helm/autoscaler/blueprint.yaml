tosca_definitions_version: cloudify_dsl_1_4

description: Cloudify helm-kafka blueprint. Installs Kafka Helm chart on top of Kubernetes cluster.

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-helm-plugin
  - plugin:cloudify-kubernetes-plugin

inputs:

  release_name:
    display_label: Release Name
    description: |
      Name of the helm release
    type: string
    default: example

  access_port:
    display_label: Access Port
    description: |
      The port number used for broker access
    type: integer
    default: 8805
    constraints:
      - greater_or_equal: 0
      - less_or_equal: 65535

  autoscaler_name:
    display_label: Autoscaler Name
    description: |
      The autoscaler group name
    type: string
    default: cloudify

  cluster_name:
    display_label: Cluster Name
    description: |
      The K8s name
    type: string
    default: k8sname
  
  max_size:
    display_label: Max Size
    description: |
      The group max size
    type: string
    default: "2"
    constraints:
      - valid_values: 
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
        - "7"
        - "8"
        - "9"
        - "10"

node_templates:

  helm_install:
    type: cloudify.nodes.helm.Binary
    properties:
      use_existing_resource: false
      installation_source: "https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz"

  repo:
    type: cloudify.nodes.helm.Repo
    properties:
      resource_config:
        name: autoscaler
        repo_url:  https://kubernetes.github.io/autoscaler
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host

  release:
    type: cloudify.nodes.helm.Release
    properties:
      client_config:
        configuration:
          api_options:
            host:
              {
                concat:
                  [
                    "https://",
                    { get_environment_capability: kubernetes_cluster_host },
                  ],
              }
            api_key: { get_environment_capability: token }
            ssl_ca_cert: { get_environment_capability: ssl_ca_cert }
      resource_config:
        name: { get_input: release_name }
        chart: autoscaler/cluster-autoscaler
        set_values:
          - name: service.type
            value: LoadBalancer
          - name: service.servicePort
            value: { get_input: access_port }
          - name: autoscalingGroups[0].name
            value: { get_input: autoscaler_name } 
          - name: autoscalingGroups[0].minSize
            value: "1"
          - name: autoscalingGroups[0].maxSize
            value: { get_input: max_size }
          - name: cloudProvider
            value: gce
          - name: autoDiscovery.clusterName
            value: 
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host
      - target: repo
        type: cloudify.relationships.depends_on

  svc:
    type: cloudify.kubernetes.resources.Service
    properties:
      client_config:
        configuration:
          api_options:
            host:
              {
                concat:
                  [
                    "https://",
                    { get_environment_capability: kubernetes_cluster_host },
                  ],
              }
            api_key: { get_environment_capability: token }
            ssl_ca_cert: { get_environment_capability: ssl_ca_cert }
      use_external_resource: true
      allow_node_redefinition: false
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: { concat: [{ get_input: release_name }, -gce-cluster-autoscaler ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: release

labels:
  obj-type:
    values:
      - helm

capabilities:
  autoscaler_access_points:
    value: { concat: [ { get_attribute: [ svc, kubernetes, status, load_balancer, ingress, 0, ip ] }, ":", { get_input: access_port }  ] }

 
