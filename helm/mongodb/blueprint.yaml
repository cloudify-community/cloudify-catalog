tosca_definitions_version: cloudify_dsl_1_3

description: Cloudify helm-mongodb blueprint. Installs MongoDB Helm chart on top of Kubernetes cluster.

imports:
  - https://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-helm-plugin
  - plugin:cloudify-kubernetes-plugin

inputs:

  replica_count:
    description: |
      Number of pod replicas
    type: string
    default: "1"

  release_name:
    description: |
      Name of the helm release
    type: string
    default: example

node_templates:

  password_generator:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          executor: central_deployment_agent
          implementation: scripts/generate-password.sh

  helm_install:
    type: cloudify.nodes.helm.Binary
    properties:
      use_existing_resource: false
      installation_source: "https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz"

  repo:
    type: cloudify.nodes.helm.Repo
    properties:
      resource_config:
        name: bitnami
        repo_url: https://charts.bitnami.com/bitnami
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host

  release:
    type: cloudify.nodes.helm.Release
    properties:
      client_config:
        configuration:
          api_options:
            host:
              {
                concat:
                  [
                    "https://",
                    { get_environment_capability: kubernetes_cluster_host },
                  ],
              }
            api_key: { get_environment_capability: token }
            ssl_ca_cert: { get_environment_capability: ssl_ca_cert }
      resource_config:
        name: { get_input: release_name }
        chart: bitnami/mongodb
        set_values:
          - name: replicaCount
            value: { get_input: replica_count }
          - name: auth.rootUser
            value: "root"
          - name: auth.rootPassword
            value: { get_attribute: [ password_generator, master_password ] }
          - name: service.type
            value: LoadBalancer
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host
      - target: repo
        type: cloudify.relationships.depends_on
      - target: password_generator
        type: cloudify.relationships.depends_on

  svc:
    type: cloudify.kubernetes.resources.Service
    properties:
      client_config:
        configuration:
          api_options:
            host:
              {
                concat:
                  [
                    "https://",
                    { get_environment_capability: kubernetes_cluster_host },
                  ],
              }
            api_key: { get_environment_capability: token }
            ssl_ca_cert: { get_environment_capability: ssl_ca_cert }
      use_external_resource: true
      allow_node_redefinition: false
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: { concat: [ { get_input: release_name }, -mongodb ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: release

labels:
  obj-type:
    values:
      - helm
capabilities:
  root_password:
    value: { get_attribute: [ password_generator, master_password ] }
  mongodb_ip:
    value:
      {
        get_attribute: [ svc, kubernetes, status, load_balancer, ingress, 0, ip ],
      }
  port:
    value: { get_attribute: [ svc, kubernetes, spec, ports, 0, port ] }
