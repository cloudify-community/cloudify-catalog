tosca_definitions_version: cloudify_dsl_1_3

description: Cloudify Docker blueprint. Deploys Docker.

imports:
  - https://raw.githubusercontent.com/cloudify-community/eaas-example/master/utils/custom_types.yaml
  - http://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-docker-plugin

inputs:

  infra_name:
    description: >
      Name of infrastructure blueprint to deploy.
    type: string
    constraints:
      - valid_values:
          - azure
          - aws

  infra_archive:
    description: >
      URL of infra zip file.
    type: string
    default: 'infra.zip'

  infra_exists:
    description: >
      Whether a getting started infrastructure blueprint has already been uploaded to the manager or not.
    default: false

  infra_deployment_id:
    description: The blueprint name, the deployment name.
    default: { concat: [ 'infra-', { get_input: infra_name } ] }

  user_name:
    description: The username to set for the system's initial super-user
    default: cloudify
  
  bucket: 
    description: The name to set for the system's initial bucket 
    default: bucket
  
  org: 
    description: The name to set for the system's initial organization
    default: cloudify

  token: 
    description: Token to auth with the influxdb from telegraf
    default: 9859DAA6-3B3F-48FE-A981-AE9D31FBB334
    hidden: true

node_templates:

  # infra_prefix:
  #   type: eaas.nodes.UniquePrefixGenerator
  #   properties:
  #     predefined_value: ""

  # infrastructure:
  #   type: cloudify.nodes.Component
  #   properties:
  #     resource_config:
  #       blueprint:
  #         id: { get_input: infra_deployment_id }
  #         blueprint_archive: { get_input: infra_archive }
  #         main_file_name: { concat: [ { get_input: infra_name }, '.yaml' ] }
  #         external_resource: { get_input: infra_exists }
  #       deployment:
  #         id: { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }
  #   relationships:
  #     - type: cloudify.relationships.depends_on
  #       target: infra_prefix


  # docker:
  #   type: cloudify.nodes.ApplicationServer
  #   interfaces:
  #     cloudify.interfaces.lifecycle:
  #       create:
  #         implementation: fabric.fabric_plugin.tasks.run_script
  #         inputs:
  #           script_path: scripts/install_docker.sh
  #           fabric_env: &fabric_env
  #             host_string: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] } , endpoint ] }
  #             user: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, user ] }
  #             key: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, key_content ] }
  #           use_sudo: true
  #       configure:
  #         implementation: fabric.fabric_plugin.tasks.run_script
  #         inputs: 
  #           script_path: scripts/install_container.sh
  #           fabric_env: *fabric_env
  #           use_sudo: true
  #       delete:
  #         implementation: fabric.fabric_plugin.tasks.run_script
  #         inputs:
  #           script_path: scripts/uninstall_docker.sh
  #           fabric_env: *fabric_env
  #           use_sudo: true
  #   relationships:
  #     - type: cloudify.relationships.depends_on
  #       target: infrastructure

  password_generator:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          executor: central_deployment_agent
          implementation: scripts/generate-password.sh
  
  docker_container_files:
    type: cloudify.nodes.docker.container_files
    properties:
      resource_config:
        docker_machine:
          docker_ip: { get_capability: [ { concat: [ { get_attribute: [ infra_prefix, value ] }, "-", { get_input: infra_deployment_id } ] }, endpoint] }
          docker_user: { get_capability: [ { concat: [ { get_attribute: [ infra_prefix, value ] }, "-", { get_input: infra_deployment_id } ] }, user] }
          docker_key: { get_capability: [ { concat: [ { get_attribute: [ infra_prefix, value ] }, "-", { get_input: infra_deployment_id } ] }, key_content ] }
        source: "./config.zip"
        destination: ""
    relationships:
      - type: cloudify.relationships.depends_on
        target: docker
    
  docker_influxdb_container:
    type: cloudify.nodes.docker.container
    properties:
      client_config:
        docker_host: { get_capability: [ { concat: [ { get_attribute: [ infra_prefix, value ] }, "-", { get_input: infra_deployment_id } ] }, endpoint] }
        docker_rest_port: '2375'
      resource_config:
        image_tag: "influxdb:2.0"
        container_args:
          command:  "/entrypoint.sh influxd" 
          host_config:
            port_bindings: {8086 : 8086}
          name: influxdb
          ports: [ 8086 ]
          environment: [
           { concat: [ "DOCKER_INFLUXDB_INIT_PASSWORD=", { get_attribute: [ password_generator, master_password ] } ] }, 
           { concat: [ "DOCKER_INFLUXDB_INIT_MODE=setup" ] },
           { concat: [ "DOCKER_INFLUXDB_INIT_USERNAME=", { get_input: user_name } ] },
           { concat: [ "DOCKER_INFLUXDB_INIT_ORG=", { get_input: org }] },
           { concat: [ "DOCKER_INFLUXDB_INIT_BUCKET=", { get_input: bucket } ] }, 
           { concat: [ "DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=", { get_input: token } ] } ,
          ]
          detach: True
    relationships:
      - type: cloudify.relationships.depends_on
        target: docker
      - type: cloudify.relationships.depends_on
        target: password_generator
  
  docker_telegraf_container:
    type: cloudify.nodes.docker.container
    properties:
      client_config:
        docker_host: { get_capability: [ { concat: [ { get_attribute: [ infra_prefix, value ] }, "-", { get_input: infra_deployment_id } ] }, endpoint] }
        docker_rest_port: '2375'
      resource_config:
        image_tag: "telegraf:latest"
        container_args:
          command: "/entrypoint.sh telegraf"
          environment: [
            { concat: [ "INFLUXDB_TOKEN=", { get_input: token }] }, 
            { concat: [ "INFLUXDB_BUCKET=",{ get_input: bucket }  ] },
            { concat: [ "INFLUXDB_ORG=",  { get_input: org } ] },
            { concat: [ "TELEGRAF_CONFIG_PATH=", "/config/telegraf.conf" ] }
          ]
          working_dir: { get_attribute: [docker_container_files, storage_dir] }
          volumes: 
          - '/config'
          volumes_mapping: 
            - { get_attribute: [ docker_container_files, destination ] }
          host_config:
            network_mode: "container:influxdb"
          detach: True
    relationships:
      - type: cloudify.relationships.depends_on
        target: docker_container_files
      - type: cloudify.relationships.depends_on
        target: docker_influxdb_container

outputs:
  docker_endpoint:
    description: Administration console URL
    value: { concat: [ 'http://', { get_capability: [ { concat: [ { get_attribute: [ infra_prefix, value ] }, "-", { get_input: infra_deployment_id } ] }, endpoint] }, ':2375' ] }
  
  influxdb_password:
    description: Influxdb password
    value: { get_attribute: [ password_generator, master_password ] }
  
  influxdb_user:
    description: Influxdb user
    value: { get_input: user_name}

  influxdb_bucket:
    description: Influxdb user
    value: { get_input: bucket }

  influxdb_org:
    description: Influxdb org
    value: { get_input: org }

  endpoint:
    description: Influxdb endpoint
    value: { concat: [ "http://", { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, endpoint] }, ':8086' ] }