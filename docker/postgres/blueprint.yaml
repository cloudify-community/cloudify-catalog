tosca_definitions_version: cloudify_dsl_1_4

description: Cloudify Docker blueprint. Deploys Docker.

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-docker-plugin

inputs:
  infra_name:
    description: >
      Name of infrastructure blueprint to deploy.
    type: string
    constraints:
      - valid_values:
          - azure
          - aws

  infra_archive:
    description: >
      URL of infra zip file.
    type: string
    default: 'infra.zip'

  infra_exists:
    description: >
      Whether a getting started infrastructure blueprint has already been uploaded to the manager or not.
    default: false

  infra_deployment_id:
    description: The blueprint name, the deployment name.
    default: { concat: [ 'infraz-', { get_input: infra_name } ] }

node_templates:

    infrastructure:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: { concat: [ { get_input: infra_name }, ".zip" ] }
          main_file_name: blueprint.yaml
          external_resource: { get_input: infra_exists }
        deployment:
          id: { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: infra_prefix
  
  secrurity_group_rules:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: "security_group.zip"
          main_file_name: { concat: [ { get_input: infra_name }, '.yaml' ] }
          external_resource: false
        deployment:
          id: { concat: [ get_attribute: [ infra_prefix, value ], "-security-group" ] }
          inputs:
            vpc_id: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] } , vpc_id ] }
            security_group_id: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] } , security_group_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: infra_prefix
      - type: cloudify.relationships.depends_on
        target: infrastructure
  
  image:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_commands
          inputs:
            commands:
            - docker pull postgres
            fabric_env: &fabric_env
              host_string: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] } , endpoint ] }
              user: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, user ] }
              key: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, key_content ] }
            use_sudo: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure

  password_generator:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          executor: central_deployment_agent
          implementation: scripts/generate-password.sh
    
  docker_redis_container:
    type: cloudify.nodes.docker.container
    properties:
      client_config:
        docker_host: { get_capability: [ { get_input: infra_deployment_id }, endpoint] }
        docker_rest_port: '2375'
      resource_config:
        image_tag: "postgres:latest"
        container_args:
          command:  "docker-entrypoint.sh postgres"
          name: postgres
          environment: [ { concat: [ "POSTGRES_PASSWORD=", { get_attribute: [ password_generator, master_password ] } ] } ]
          detach: True
          ports: [ 5432 ]
          host_config:
            port_bindings: { 5432 : 5432 }
            restart_policy: { "MaximumRetryCount": 0,  "Name": "always" }
    relationships:
      - type: cloudify.relationships.depends_on
        target: image
      - type: cloudify.relationships.depends_on
        target: password_generator

outputs:
  docker_api_url:
    description: Administration console URL
    value: { concat: [ 'http://', { get_capability: [ { get_input: infra_deployment_id }, endpoint] }, ':2375' ] }

  postgres_endpoint:
    description: postgres endpoint
    value: { concat: [ { get_capability: [ { concat: [ { get_input: infra_deployment_id } ] }, endpoint] }, ':5432' ] }

  postgres_password:
    description: Postgres root password
    value: { get_attribute: [ password_generator, master_password ] }
  
