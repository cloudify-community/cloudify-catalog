tosca_definitions_version: cloudify_dsl_1_4

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-azure-plugin?version= >=3.0.10
  - plugin:cloudify-terraform-plugin?version= >=0.18.8

dsl_definitions:
  client_config: &azure_config
    subscription_id: { get_input: [ cloud_credentials, azure_subscription_id ] }
    tenant_id: { get_input: [ cloud_credentials, azure_tenant_id ] }
    client_id: { get_input: [ cloud_credentials, azure_client_id ] }
    client_secret: { get_input: [ cloud_credentials, azure_client_secret ] }

inputs:

  cloud_credentials:
    default:
      azure_tenant_id: { get_secret: azure_tenant_id }
      azure_subscription_id: { get_secret: azure_subscription_id }
      azure_client_id: { get_secret: azure_client_id }
      azure_client_secret: { get_secret: azure_client_secret }
      public_key_content: { get_secret: public_key_content }
      private_key_content: { get_secret: private_key_content }
      region_name: WestUS2 #{ get_environment_capability: [cloud_credentials, region_name_a] }

  resource_prefix:
    type: string
    display_label: Resource Prefix
    description: Resource Prefix
    default: "xyz123"

node_templates:

  terraform:
    type: cloudify.nodes.terraform
    properties:
      resource_config:
        installation_source: https://releases.hashicorp.com/terraform/0.14.3/terraform_0.14.3_linux_amd64.zip

  terraform_vnet:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        environment_variables:
          ARM_SUBSCRIPTION_ID: { get_input: [ cloud_credentials, azure_subscription_id ] }
          ARM_TENANT_ID: { get_input: [ cloud_credentials, azure_tenant_id ] }
          ARM_CLIENT_ID: { get_input: [ cloud_credentials,  azure_client_id ] }
          ARM_CLIENT_SECRET: { get_input: [ cloud_credentials, azure_client_secret ] }
        variables:
          resource_group_name: { concat: [ { get_input: resource_prefix }, 'rg' ] }
          azure_location_name: { get_input: [ cloud_credentials, region_name ] }
          subnet_1_name: { concat: [ { get_input: resource_prefix }, '-subnet-1' ] }
          subnet_2_name: { concat: [ { get_input: resource_prefix }, '-subnet-2' ] }
          vnet_name: { concat: [ { get_input: resource_prefix }, '-vnet' ] }
          sa_name: { concat: [ { get_input: resource_prefix }, 'storageacc' ] }
          pip1_name: { concat: [ { get_input: resource_prefix }, '-public-ip-cfg-1' ] }
          pip2_name: { concat: [ { get_input: resource_prefix }, '-public-ip-cfg-2' ] }
        source:
          location: templates/tf-vnet-master.zip
        source_path: tf-vnet-master
    relationships:
      - target: terraform
        type: cloudify.terraform.relationships.run_on_host

  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      use_external_resource: true
      client_config: *azure_config
      location: { get_input: [ cloud_credentials, region_name ] }
      name: { get_attribute: [ terraform_vnet, outputs, rg_id, value ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: terraform_vnet

  network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      use_external_resource: true
      name: { get_attribute: [ terraform_vnet, outputs, vn_id, value] }
      location: { get_input: [ cloud_credentials, region_name ] }
      resource_group_name: { get_attribute: [ terraform_vnet, outputs, rg_id, value ] }
      client_config: *azure_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: terraform_vnet
      - type: cloudify.relationships.depends_on
        target: resource_group
      
  private_subnet_1:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      use_external_resource: true
      client_config: *azure_config
      location: { get_input: [ cloud_credentials, region_name ] }
      name: { get_attribute: [ terraform_vnet, outputs, subnet_1_id, value ] }
      resource_group_name: { get_attribute: [ terraform_vnet, outputs, rg_id, value ] }
    relationships:
      - type: cloudify.azure.relationships.contained_in_virtual_network
        target: network

  private_subnet_2:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      use_external_resource: true
      client_config: *azure_config
      location: { get_input: [ cloud_credentials, region_name ] }
      name: { get_attribute: [ terraform_vnet, outputs, subnet_2_id, value ] }
      resource_group_name: { get_attribute: [ terraform_vnet, outputs, rg_id, value ] }
    relationships:
      - type: cloudify.azure.relationships.contained_in_virtual_network
        target: network
      - type: cloudify.relationships.depends_on
        target: private_subnet_1

  public_subnet_01:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      client_config: *azure_config
      name: { concat: [ { get_input: resource_prefix }, '-aks-public-subnet-1' ] }
      location: { get_input: [ cloud_credentials, region_name ] }
      resource_group_name: { get_attribute: [ terraform_vnet, outputs, rg_id, value ] }
      tags:
        Name: { concat: [ { get_input: resource_prefix }, '-aks-public-subnet-1' ] }
      retry_after: 5
      resource_config:
        addressPrefix: 10.0.4.0/24
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: network
    - type: cloudify.relationships.depends_on
      target: private_subnet_2

  public_subnet_02:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      client_config: *azure_config
      name: { concat: [ { get_input: resource_prefix }, '-aks-public-subnet-2' ] }
      location: { get_input: [ cloud_credentials, region_name ] }
      resource_group_name: { get_attribute: [ terraform_vnet, outputs, rg_id, value ] }
      tags:
        Name: { concat: [ { get_input: resource_prefix }, '-aks-public-subnet-2' ] }
      retry_after: 5
      resource_config:
        addressPrefix: 10.0.5.0/24
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: network
    - type: cloudify.relationships.depends_on
      target: public_subnet_01

  security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      client_config: *azure_config
      location: { get_input: [ cloud_credentials, region_name ] }
      name: { concat: [ { get_input: resource_prefix }, '-aks-test-group' ] }
      resource_group_name: { get_attribute: [ terraform_vnet, outputs, rg_id, value ] }
    relationships:
      - type: cloudify.azure.relationships.contained_in_virtual_network
        target: network
      # - type: cloudify.relationships.depends_on
      #   target: private_nat_gateway_02

  security_group_rule:
    type: cloudify.azure.nodes.network.NetworkSecurityRule
    properties:
      client_config: *azure_config
      name: { concat: [ { get_input: resource_prefix }, '-aks-test-group-allow-all' ] }
      resource_group_name: { get_attribute: [ terraform_vnet, outputs, rg_id, value ] }
      location: { get_input: [ cloud_credentials, region_name ] }
      retry_after: 5
      resource_config:
        description: Allow all
        protocol: '*'
        sourcePortRange: '*'
        destinationPortRange: '*'
        sourceAddressPrefix: '*'
        destinationAddressPrefix: '*'
        priority: 100
        access: Allow
        direction: Inbound
    relationships:
      - type: cloudify.azure.relationships.contained_in_network_security_group
        target: security_group

  storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      use_external_resource: true
      client_config: *azure_config
      name: { get_attribute: [ terraform_vnet, outputs, sa_id, value] }
      location: { get_input: [ cloud_credentials, region_name ] }
      resource_group_name: { get_attribute: [ terraform_vnet, outputs, rg_id, value ] }
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group
      - type: cloudify.relationships.depends_on
        target: security_group

capabilities:
  rg_id:
    value: { get_attribute: [ resource_group, name ] }
  vn_id:
    value: { get_attribute: [ network, name] }
  private_subnet_ids:
    value:
      - { get_attribute: [ private_subnet_1, resource_id ] }
      - { get_attribute: [ private_subnet_2, resource_id ] }
  public_subnet_ids:
    value:
      - { get_attribute: [ public_subnet_01, resource_id ] }
      - { get_attribute: [ public_subnet_02, resource_id ] }
  public_ips_ids:
    value:
      - { get_attribute: [ terraform_vnet, outputs, pip1_id, value ] }
      - { get_attribute: [ terraform_vnet, outputs, pip2_id, value ] }
  public_ips:
    value:
      - { get_attribute: [ terraform_vnet, outputs, pip1, value ] }
      - { get_attribute: [ terraform_vnet, outputs, pip2, value ] }
  fqdns:
    value:
      - { get_attribute: [ terraform_vnet, outputs, pip1_fqdn, value ] }
      - { get_attribute: [ terraform_vnet, outputs, pip2_fqdn, value ] }
  aks_security_group_id:
    value: { get_attribute: [ security_group, name ] }
  resource_prefix:
    value: { get_input: resource_prefix }