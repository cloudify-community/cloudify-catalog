tosca_definitions_version: cloudify_dsl_1_4

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-azure-plugin?version= >=3.7.8
  - plugin:cloudify-kubernetes-plugin?version= >=2.13.14 
  - plugin:cloudify-helm-plugin
  - https://raw.githubusercontent.com/cloudify-community/eaas-example/master/utils/custom_types.yaml

dsl_definitions:
  client_config: &azure_config
    subscription_id: { get_input: [ cloud_credentials, azure_subscription_id ] }
    tenant_id: { get_input: [ cloud_credentials, azure_tenant_id ] }
    client_id: { get_input: [ cloud_credentials, azure_client_id ] }
    client_secret: { get_input: [ cloud_credentials, azure_client_secret ] }

inputs:

  resource_config:
    default:
      service_account_namespace: default
      service_cidr: 10.0.8.0/23
      docker_bridge_cidr: 10.0.10.1/23
      dns_service_ip: "10.0.8.2"
      node_pool_size: 1
    display_label: Resource Config

  cloud_credentials:
    default:
      azure_tenant_id: { get_secret: azure_tenant_id }
      azure_subscription_id: { get_secret: azure_subscription_id }
      azure_client_id: { get_secret: azure_client_id }
      azure_client_secret: { get_secret: azure_client_secret }
      public_key_content: { get_secret: public_key_content }
      private_key_content: { get_secret: private_key_content }
      region_name: { get_secret: region_name }
    display_label: Cloud Credentials
    description: Cloud Credentials

  resource_prefix:
    type: string
    display_label: Resource Prefix
    description: |
      If not provided, it will be auto-generated.
    default: ''
    constraints:
      - pattern: '(^ *$)|(^[a-zA-Z][a-zA-Z0-9]+$)'

  chart_name:
    type: string
    display_label: Chart Name
    description: >
      Chart package name to deploy from repo.
    default: datadog

  repo_name:
    display_label: Repo Name
    description: >
      Name of the repo to add.
    type: string
    default: datadog

  repo_url:
    display_label: Repo URL
    description: >
      URL to the repo
    type: string
    default: 'https://helm.datadoghq.com'
    constraints:
      - pattern: ^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$

  helm_installation_source:
    display_label: Helm Installation Source
    description: >
      Helm download link.
    type: string
    default: 'https://get.helm.sh/helm-v3.9.3-linux-amd64.tar.gz'
    constraints:
      - pattern: ^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$

node_templates:
  prefix:
    type: eaas.nodes.UniquePrefixGenerator
    properties:
      predefined_value: { get_input: resource_prefix }
      
  network:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          blueprint_archive: network.zip
          external_resource: false
          main_file_name: blueprint.yaml
        deployment:
          inputs: 
            resource_prefix: { get_attribute: [ prefix, value ] }
            cloud_credentials: { get_input: cloud_credentials }
          auto_inc_suffix: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: prefix

  aks_cluster:
    type: cloudify.azure.nodes.compute.ManagedCluster
    properties:
      resource_group: { get_attribute: [ network, capabilities, rg_id ] }
      cluster_name: { concat: [ { get_attribute: [ network, capabilities, resource_prefix ] }, '-aks-cluster' ] }
      resource_config:
        location: { get_input: [ cloud_credentials, region_name ] }
        tags:
          Name: { concat: [ { get_attribute: [ network, capabilities, resource_prefix ] }, '-aks-cluster' ] }
          tier: "Free"
        kubernetes_version: ""
        dns_prefix: { concat: [ { get_attribute: [ network, capabilities, resource_prefix ] }, 'aks' ] }
        agent_pool_profiles:
          - name: 'ap1'
            count: { get_input: [ resource_config, node_pool_size ] }
            vmSize: "Standard_B2s"
            osType: "Linux"
            type: "VirtualMachineScaleSets"
            mode: "System"
            vnetSubnetID: { get_attribute: [ network, capabilities, private_subnet_ids, 0 ] }
        linux_profile:
          adminUsername: "azureuser"
          ssh:
            publicKeys:
              - keyData : { get_input: [ cloud_credentials, public_key_content ] }
        network_profile:
          networkPlugin: "azure"
          loadBalancerSku: "Standard"
          outboundType: "loadBalancer"
          loadBalancerProfile:
            managedOutboundIPs:
              count: 2
          serviceCidr: { get_input: [ resource_config, service_cidr ] }
          dockerBridgeCidr: { get_input: [ resource_config, docker_bridge_cidr ] }
          dnsServiceIp: { get_input: [ resource_config, dns_service_ip ] }
        windows_profile:
          adminUsername: "azureuser"
          adminPassword: "ChangeMe#12345!"
        service_principal_profile:
          clientId: { get_input: [ cloud_credentials, azure_client_id ] }
          secret: { get_input: [ cloud_credentials, azure_client_secret ] }
        addon_profiles: {}
        enable_rbac: true
      client_config: *azure_config
      store_kube_config_in_runtime: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: network

  kubernetes_master:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration: &kubernetes_master_configuration
        file_content: { get_attribute: [ aks_cluster, kubeconf ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: aks_cluster

  new_service_account:
    type: cloudify.kubernetes.resources.ServiceAccount
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: { concat: [ { get_attribute: [ network, capabilities, resource_prefix ] }, '-user' ] }
          namespace: { get_input: [ resource_config, service_account_namespace ] }
      options:
        namespace: { get_input: [ resource_config, service_account_namespace ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master

  new_role_binding:
    type: cloudify.kubernetes.resources.RoleBinding
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: { get_property: [ new_service_account, definition, metadata, name ] }
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - kind: ServiceAccount
            name: { get_property: [ new_service_account, definition, metadata, name ] }
            namespace: { get_input: [ resource_config, service_account_namespace ] }
      options:
        namespace: { get_input: [ resource_config, service_account_namespace ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: new_service_account

  secret:
    type: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: { get_attribute: [new_service_account, kubernetes, secrets, 0, name ] }
      api_mapping:
        create:
          api: CoreV1Api
          method: create_namespaced_secret
          payload: V1Secret
        read:
          api: CoreV1Api
          method: read_namespaced_secret
        update:
          api: CoreV1Api
          method: replace_namespaced_secret
          payload: V1Secret
        delete:
          api: CoreV1Api
          method: delete_namespaced_secret
          payload: V1DeleteOptions
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: new_role_binding
      - type: cloudify.relationships.depends_on
        target: new_service_account

  store_token:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/store_kube_token.py
          executor: central_deployment_agent
          inputs:
            kube_token: {get_attribute: [secret, kubernetes, data, token ]}
    relationships:
      - type: cloudify.relationships.depends_on
        target: secret
  
  helm_install:
    type: cloudify.nodes.helm.Binary
    properties:
      use_existing_resource: false
      installation_source: { get_input: helm_installation_source }

  repo:
    type: cloudify.nodes.helm.Repo
    properties:
      resource_config:
        name: { get_input: repo_name }
        repo_url: { get_input: repo_url }
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host
  
  datadog:
    type: cloudify.nodes.helm.Release
    properties:
      client_config:
        configuration:
          file_content: { get_attribute: [ aks_cluster, kubeconf ] }
          api_options:
            api_key: { get_attribute: [ store_token, token ] }
      resource_config:
        name: "datadog"
        chart: { concat: [ { get_input: repo_name },'/', { get_input: chart_name } ] }
        values_file: resources/datadog.yaml
        set_values:
          - name: datadog.site
            value: datadoghq.eu
          - name: datadog.apiKey
            value: 243b36d6ff68ac9ffbfeb2aa8f191545 # { get_secret: datadog_api_key } 
          - name: datadog.apm.enabled
            value: 'true'
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host
      - target: repo
        type: cloudify.relationships.depends_on
      - target: aks_cluster
        type: cloudify.relationships.depends_on

  hello_world:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      client_config:
        configuration:
          api_options:
            host: { get_attribute: [aks_cluster, kubeconf, clusters, 0, cluster, server ] }
            api_key: { get_attribute: [ store_token, token ] }
            debug: false
            verify_ssl: false
      validate_resource_status: true
      file:
        resource_path: resources/hello.yaml
        template_variables:
          APP_TITLE: { concat: [ "Hello from ", { get_attribute: [ network, capabilities, resource_prefix ] }, '-aks-cluster' ] }
          LB_IP: { get_attribute: [ network, capabilities, public_ips, 1 ] }
          RG_NAME: { get_attribute: [ network, capabilities, rg_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: store_token
          
capabilities:
  endpoint:
    value: { get_attribute: [ aks_cluster, kubeconf, clusters, 0, cluster, server ] }
  hello_world_fqdn:
    value: { get_attribute: [ network, capabilities, fqdns, 1 ] }
  config:
    value:
      file_content: { get_attribute: [ aks_cluster, kubeconf ] }
  resource_group_name:
    value: { get_attribute: [ network, capabilities, rg_id ] }
  private_subnet_ids:
    value: { get_attribute: [ network, capabilities, private_subnet_ids ] }
