tosca_definitions_version: cloudify_dsl_1_4

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-azure-plugin?version= >=3.0.10
  - plugin:cloudify-kubernetes-plugin?version= >=2.9.3
  - https://raw.githubusercontent.com/cloudify-community/eaas-example/master/utils/custom_types.yaml

dsl_definitions:
  client_config: &azure_config
    subscription_id: { get_input: [ cloud_credentials, azure_subscription_id ] }
    tenant_id: { get_input: [ cloud_credentials, azure_tenant_id ] }
    client_id: { get_input: [ cloud_credentials, azure_client_id ] }
    client_secret: { get_input: [ cloud_credentials, azure_client_secret ] }

labels:
  csys-obj-parent:
    values:
      - azure_dr

inputs:

  cloud_credentials_a:
    type: cloud_credentials_a
    display_label: Cloud Credentials A
    description: Credentials to the cloud A

  cloud_credentials_b:
    type: cloud_credentials_b
    display_label: Cloud Credentials B
    description: Credentials to the cloud B

  resource_prefix:
    type: string
    description: |
      If not provided, it will be auto-generated.
    display_label: Resource Prefix
    default: ''
    constraints:
      - pattern: '(^ *$)|(^[a-zA-Z][a-zA-Z0-9]+$)'

data_types:

  cloud_credentials:
    properties:
      azure_tenant_id:
        type: string
        default: { get_environment_capability: [cloud_credentials, azure_tenant_id] }
      azure_subscription_id:
        type: string
        default: { get_environment_capability: [cloud_credentials, azure_subscription_id] }
      azure_client_id:
        type: string
        default: { get_environment_capability: [cloud_credentials, azure_client_id] }
      azure_client_secret:
        type: string
        default: { get_environment_capability: [cloud_credentials, azure_client_secret] }
      public_key_content:
        type: string
        default: { get_environment_capability: [cloud_credentials, public_key_content] }
      private_key_content:
        type: string
        default: { get_environment_capability: [cloud_credentials, private_key_content] }
  
  cloud_credentials_a:
    derived_from: cloud_credentials
    properties:
      region_name:
        type: string
        default: { get_environment_capability: [cloud_credentials, region_name_a] }

  cloud_credentials_b:
    derived_from: cloud_credentials
    properties:
      region_name:
        type: string
        default: { get_environment_capability: [cloud_credentials, region_name_b ] }

node_templates:
  prefix:
    type: eaas.nodes.UniquePrefixGenerator
    properties:
      predefined_value: { get_input: resource_prefix }
      
  aks_cluster_a:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          blueprint_archive: blueprints/aks.zip
          external_resource: false
        deployment:
          id: aks_cluster_a
          inputs: 
            resource_config: {}
            resource_prefix: { concat: [ { get_attribute: [ prefix , value ] }, 'adr' ] }
            cloud_credentials: { get_input: cloud_credentials_a }
          auto_inc_suffix: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: prefix

  aks_cluster_b:
   type: cloudify.nodes.ServiceComponent
   properties:
     resource_config:
       blueprint:
         blueprint_archive: blueprints/aks.zip
         external_resource: false
       deployment:
         id: aks_cluster_b
         inputs: 
           resource_config: {}
           resource_prefix: { concat: [ { get_attribute: [ prefix , value ] }, 'bdr' ] }
           cloud_credentials: { get_input: cloud_credentials_b }
         auto_inc_suffix: true
   relationships:
     - type: cloudify.relationships.depends_on
       target: prefix

  load_balancer:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          blueprint_archive: blueprints/lb.zip
          external_resource: false
        deployment:
          id: load_balancer
          inputs: 
            resource_prefix: { concat: [ { get_attribute: [ prefix , value ] }, 'adr' ] }
            cloud_credentials: { get_input: cloud_credentials_b }
            fqdn_primary: { get_attribute: [ aks_cluster_a, capabilities, hello_world_fqdn ] }
            fqdn_secondary: { get_attribute: [ aks_cluster_b, capabilities, hello_world_fqdn ] }
            resource_group_name: { get_attribute: [ aks_cluster_a, capabilities, rg_id ] }
          auto_inc_suffix: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: prefix
      - type: cloudify.relationships.depends_on
        target: aks_cluster_b
      - type: cloudify.relationships.depends_on
        target: aks_cluster_a

  database:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          blueprint_archive: blueprints/database.zip
          external_resource: false
        deployment:
          id: database_dr
          inputs: 
            resource_prefix: { concat: [ { get_attribute: [ prefix , value ] }, 'adr' ] }
            cloud_credentials: { get_input: cloud_credentials_a }
            resource_group_a: { get_attribute: [ aks_cluster_a, capabilities, resource_group_name ] }
            resource_group_b: { get_attribute: [ aks_cluster_b, capabilities, resource_group_name ] }
            location_a: { get_input: [ cloud_credentials_a, region_name ] }
            location_b: { get_input: [ cloud_credentials_b, region_name ] } 
            subnet_a: { get_attribute: [ aks_cluster_a, capabilities, private_subnet_ids, 0 ] }
            subnet_b: { get_attribute: [ aks_cluster_b, capabilities, private_subnet_ids, 0 ] }
          auto_inc_suffix: true
    relationships:
     - type: cloudify.relationships.depends_on
       target: aks_cluster_b
     - type: cloudify.relationships.depends_on
       target: aks_cluster_a

  storage:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          blueprint_archive: blueprints/storage.zip
          external_resource: false
        deployment:
          id: storage_dr
          inputs: 
            resource_prefix: { concat: [ { get_attribute: [ prefix , value ] }, 'adr' ] }
            cloud_credentials: { get_input: cloud_credentials_a }
            resource_group_a: { get_attribute: [ aks_cluster_a, capabilities, resource_group_name ] }
            resource_group_b: { get_attribute: [ aks_cluster_b, capabilities, resource_group_name ] }
            location_a: { get_input: [ cloud_credentials_a, region_name ] }
            location_b: { get_input: [ cloud_credentials_b, region_name ] } 
          auto_inc_suffix: true
    relationships:
     - type: cloudify.relationships.depends_on
       target: aks_cluster_b
     - type: cloudify.relationships.depends_on
       target: aks_cluster_a

outputs:
  tm_endpoint:
    value:
      - { get_attribute: [ load_balancer, capabilities, tm_endpoint ] }
      
  database_enpoint:
    value:
      - { get_attribute: [ database, capabilities, sql_endpoint ] }
  
  database_password:
    value: 
      - { get_attribute: [ database, capabilities, database_password ] }

  database_login: 
    value:
      - { get_attribute: [ database, capabilities, database_login ] }
  
  database_name: 
    value:
      - { get_attribute: [ database, capabilities, database_name ] }

  database_port:
    value: '1433'

  primary_storage_id: 
    value:
      - { get_attribute: [ storage, capabilities, primary_storage_id ] }

  failover_storage_id: 
    value:
      - { get_attribute: [ storage, capabilities, failover_storage_id ] }