tosca_definitions_version: cloudify_dsl_1_3

description: Installs Oracle with Ansible on AWS/Azure environments.

imports:
  - https://raw.githubusercontent.com/cloudify-community/eaas-example/master/utils/custom_types.yaml
  - http://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-ansible-plugin

inputs:

  infra_name:
    display_label: Name of the provider to deploy resources
    description: >
      Name of infrastructure blueprint to deploy.
    type: string
    constraints:
      - valid_values:
          - azure
          - aws

  infra_archive:
    display_label: URL for infra zip archive
    description: >
      URL of infra zip file.
    type: string
    default: https://github.com/cloudify-community/cloudify-catalog/raw/6.4.0-build/docker/vm/vm.zip

  infra_exists:
    display_label: Set if infra exists or not 
    description: >
      Whether a getting started infrastructure blueprint has already been uploaded to the manager or not.
    type: string
    default: false

  infra_deployment_id:
    display_label: The infrastructure deployment id
    description: The blueprint name, the deployment name.
    type: string
    default: { concat: [ 'infra-', { get_input: infra_name } ] }

  oracle_password:
    type: string
    display_label: Password for oracle db server
    description: login password for oracle db server
    default: { get_secret: oracle_password }

node_templates:

  infra_prefix:
    type: eaas.nodes.UniquePrefixGenerator
    properties:
      predefined_value: ""

  # deployment of the infrastructure, we pass the URL as a blueprint archive
  # the node will automatically fetch the file from the URL host and unzip it
  # we point the node to use particular infrastructure cloud provider within 
  # main_file_name param by setting infra_name input as the file name value
  infrastructure:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: { get_input: infra_archive }
          main_file_name: { concat: [ { get_input: infra_name }, '.yaml' ] }
          external_resource: { get_input: infra_exists }
        deployment:
          id: { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }
          inputs: 
            resource_prefix: { get_attribute: [ infra_prefix, value ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: infra_prefix
  
  # we setting the mysql port to be open
  security_group_rules:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: "security_group.zip"
          main_file_name: { concat: [ { get_input: infra_name }, '.yaml' ] }
          external_resource: false
        deployment:
          id: { concat: [ get_attribute: [ infra_prefix, value ], "-security-group" ] }
          inputs:
            vm_id: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] } , vm_id ] }
            vpc_id: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] } , vpc_id ] }
            security_group_id: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] } , security_group_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure

  oracle_db:
    type: cloudify.nodes.ansible.Playbook
    properties:
      playbook_path: playbooks/install_oracle.yaml
      ansible_env_vars:
        ANSIBLE_INVALID_TASK_ATTRIBUTE_FAILED: "False"
        ANSIBLE_HOST_KEY_CHECKING: "False"
        ANSIBLE_STDOUT_CALLBACK: dense
      store_facts: false
    interfaces:
      cloudify.interfaces.lifecycle:
        create: {}
        configure: {}
        poststart: {}
    relationships:
      - type: cloudify.relationships.depends_on
        target: security_group_rules
      - type: cloudify.ansible.relationships.run_on_host
        target: infrastructure
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            establish:
              inputs:
                log_stdout: false
                store_facts: false
                secret_keys:
                sources:
                  instances:
                    hosts:
                      instance:
                        ansible_host: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, endpoint] }
                        ansible_user: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, user] }
                        ansible_ssh_private_key_file: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, key_content] }
                        ansible_become: True
                        ansible_ssh_common_args: -o StrictHostKeyChecking=no
                run_data:
                  ora_password: { get_input: oracle_password }

capabilities:

  application_endpoint:
    description: The external endpoint of the DB application.
    value: { concat: [ 'http://', { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, endpoint] }] }

  oracle_password:
    description: Oracle password
    value: { get_input: oracle_password }