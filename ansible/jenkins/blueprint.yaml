tosca_definitions_version: cloudify_dsl_1_3

description: Installs Jenkins with Ansible on AWS/Azure environments.

imports:
  - https://raw.githubusercontent.com/cloudify-community/eaas-example/master/utils/custom_types.yaml
  - http://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-ansible-plugin

inputs:

  infra_name:
    display_label: Name of the provider to deploy resources
    description: >
      Name of infrastructure blueprint to deploy.
    type: string
    constraints:
      - valid_values:
          - azure
          - aws

 # we using the virtual machine image that is under maintenance
  infra_archive:
    display_label: Name of the resoruces to deploy
    description: >
      URL of infra zip file.
    type: string
    default: https://github.com/cloudify-community/cloudify-catalog/raw/6.4.0-build/docker/vm/vm.zip

  infra_exists:
    type: string
    display_label: Set if infra exists or not 
    description: >
      Whether a getting started infrastructure blueprint has already been uploaded to the manager or not.
    default: false

  infra_deployment_id:
    type: string
    display_label: The infrastructure deployment id
    description: The blueprint name, the deployment name.
    default: { concat: [ 'infra-', { get_input: infra_name } ] }

  admin_password:
    type: string
    display_label: Jenkin Admin password
    description: Admin password to be set
    default: { get_secret: jenkins_admin_password }
    
node_templates:

  # Generate a unique prefix to append to the infrastructure VM deployment
  infra_prefix:
    type: eaas.nodes.UniquePrefixGenerator
    properties:
      predefined_value: ""


  # Deployment of the infrastructure, we pass the URL as a blueprint archive.
  # The node will automatically fetch the file from the URL host and unzip it.
  # We point the node to use particular infrastructure cloud provider within 
  # main_file_name param by setting infra_name input as the file name value.
  infrastructure:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: { get_input: infra_archive }
          main_file_name: { concat: [ { get_input: infra_name }, '.yaml' ] }
          external_resource: { get_input: infra_exists }
        deployment:
          id: { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }
      secrets:
        aws_access_key_id: { get_secret: aws_access_key_id }
        aws_secret_access_key: { get_secret: aws_secret_access_key }
        subscription_id: { get_secret: azure_subscription_id }
        tenant_id: { get_secret: azure_tenant_id }
        client_id: { get_secret: azure_client_id }
        client_secret: { get_secret: azure_client_secret }
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: cfy_extensions.cloudify_types.component.create
          inputs: 
            secrets: 
              dummy: dummy
    relationships:
      - type: cloudify.relationships.depends_on
        target: infra_prefix

  # we setting the Jenkins port to be open using the security_group blueprint
  # add the necessary ports in the infra files inside it.
  secrurity_group_rules:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: "security_group.zip"
          main_file_name: { concat: [ { get_input: infra_name }, '.yaml' ] }
          external_resource: false
        deployment:
          id: { concat: [ get_attribute: [ infra_prefix, value ], "-security-group" ] }
          inputs:
            rg_id: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] } , rg_id ] }
            vpc_id: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] } , vpc_id ] }
            security_group_id: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] } , security_group_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure

  # Install Jenkins using Ansible plugin, on the newly created VM.
  # The install_jenkins.yaml playbook runs for this.
  jenkins_app:
    type: cloudify.nodes.ansible.Playbook
    properties:
      playbook_path: playbooks/install_jenkins.yaml
      ansible_env_vars:
        ANSIBLE_INVALID_TASK_ATTRIBUTE_FAILED: "False"
        ANSIBLE_HOST_KEY_CHECKING: "False"
        ANSIBLE_STDOUT_CALLBACK: dense
      store_facts: false
    interfaces:
      cloudify.interfaces.lifecycle:
        create: {}
        configure: {}
        poststart: {}
    relationships:
      - type: cloudify.ansible.relationships.run_on_host
        target: infrastructure
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            establish:
              inputs:
                log_stdout: false
                store_facts: false
                secret_keys:
                  - pb_admin_password
                sources:
                  instances:
                    hosts:
                      instance:
                        ansible_host: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, endpoint] }
                        ansible_user: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, user] }
                        ansible_ssh_private_key_file: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, key_content] }
                        ansible_become: True
                        ansible_ssh_common_args: -o StrictHostKeyChecking=no
                run_data:
                  pb_jadmin_password: { get_input: admin_password }


capabilities:

  application_endpoint:
    description: The external endpoint of the application.
    value: { concat: [ 'http://', { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, endpoint] }, ':8080' ] }

  jenkins_endpoint:
    description: application endpoint
    value: { concat: [ { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, endpoint] }, ':8080' ] }

# The initial admin password that is auto-generated by Jenkins install. 
# Need to change at first login.
#  temp_password:
#    description: initial admin password. Please change at first login.
#    value: { get_attribute: [jenkins_app, facts, ansible_local, customfacts, localfacts, initial_admin_password] }

  jenkins_admin_password:
    description: Admin password to login to the Jenkins portal
    value: { get_input: admin_password }
  



