tosca_definitions_version: cloudify_dsl_1_4

description: >
  This blueprint creates an AWS infrastructure environment.

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-aws-plugin
  - plugin:cloudify-utilities-plugin?version= >=1.22.1

inputs:

  aws_region_name:
      type: string
      default: 'us-east-1'

  availability_zone:
    type: string
    description: The availability zone in the AWS Region.
    default: 'us-east-1b'

  ami_owner_filter:
    type: string
    description: The AWS AMI owner number.
    default: '057448758665'

  ami_name_filter:
    type: string
    description: The name of the AWS AMI in the AWS region.
    default: 'CentOS 7.7.1908 x86_64 with cloud-init (HVM)'
  
  cloudify_manager_suffix:
    type: string
    default: "7.0.0-.dev1"

  instance_type:
    type: string
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: 'centos'

  suffix:
    type: string
    default: '2'

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  cloudify_manager_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
          - Name: name
            Values:
            - 'CentOS 7.9.2009 x86_64'
          - Name: owner-id
            Values:
            - '125523088429'
      client_config: *client_config

  fleet:
    type: cloudify.nodes.aws.ec2.SpotFleetRequest
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          SpotFleetRequestConfig:
            IamFleetRole: { get_attribute: [ cfy_fleet_role, aws_resource_arn ] }
            AllocationStrategy: capacityOptimized
            TargetCapacity: 1
            Type: request
            LaunchSpecifications:
                - ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
                  InstanceType: t2.micro
                  Placement:
                    AvailabilityZone: { get_input: availability_zone }
                  NetworkInterfaces:
                    - Description: "Nic1"
                      DeviceIndex: 0
                      AssociatePublicIpAddress: true
                      SubnetId: { get_attribute: [ subnet, aws_resource_id ] }
                
                - ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
                  InstanceType: t3.medium
                  Placement:
                    AvailabilityZone: { get_input: availability_zone }
                  NetworkInterfaces:
                    - Description: "Nic1"
                      DeviceIndex: 0
                      AssociatePublicIpAddress: true
                      SubnetId: { get_attribute: [ subnet, aws_resource_id ] }



    relationships:
    - type: cloudify.relationships.depends_on
      target: route_public_subnet_internet_gateway
    - type: cloudify.relationships.depends_on
      target: subnet
    - type: cloudify.relationships.depends_on
      target: cfy_fleet_role

  cfy_fleet_role:
    type: cloudify.nodes.aws.iam.Role
    properties:
      client_config: *client_config
      resource_config:
        RoleName: { concat: [ 'cfyfleetrole', { get_input: suffix } ] }
        Path: { concat: [ '/cfyfleetrole', { get_input: suffix }, '/' ] }
        AssumeRolePolicyDocument:
          Version: !!str 2012-10-17
          Statement:
          - Effect: Allow
            Principal:
              Service: !!str spotfleet.amazonaws.com
            Action: !!str sts:AssumeRole
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            modify_role_attribute_args:
              - PolicyArn: arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        IpPermissions:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9990
          ToPort: 9990
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2375
          ToPort: 2375
          IpRanges:
          - CidrIp: 0.0.0.0/0
    relationships:
    - type: cloudify.relationships.contained_in
      target: security_group

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      client_config: *client_config
      resource_config:
        GroupName: CloudifyGettingStartedExample
        Description: Created by cloudify-getting-started-example.
        VpcId: { get_attribute: [ vpc, aws_resource_id ] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  route_public_subnet_internet_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: routetable
    - type: cloudify.relationships.connected_to
      target: internet_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: vpc
    - type: cloudify.relationships.connected_to
      target: subnet

  subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      resource_config:
        CidrBlock: 10.10.4.0/24
        AvailabilityZone: { get_input: availability_zone }
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  internet_gateway:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.connected_to
      target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      resource_config:
        CidrBlock: 10.10.0.0/16