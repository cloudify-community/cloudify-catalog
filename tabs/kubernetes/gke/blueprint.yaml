tosca_definitions_version: cloudify_dsl_1_4

description: >
  This blueprint create a managed cluster.

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-gcp-plugin?version= >=1.6.0
  - plugin:cloudify-kubernetes-plugin?version= !=2.11.0

labels:
  csys-obj-type:
    values:
      - environment

inputs:
  zone:
    description: Zone
    display_label: Zone
    type: string
    default: us-west1-a

  resource_prefix:
    description: Resource Prefix
    display_label: Resource Prefix
    type: string
    default: ex2

  service_account_name:
    description: Service Account name
    display_label: Service Account Name
    type: string
    default: examples-user

  service_account_namespace:
    description: Service Account Namespace
    display_label: Service Account Namespace
    type: string
    default: default

dsl_definitions:

  gcp_config: &gcp_config
    auth: { get_secret: gcp_credentials }
    zone: { get_input: zone }

node_templates:

  kubernetes-cluster:
    type: cloudify.gcp.nodes.KubernetesCluster
    properties:
      name: { concat: [ { get_input: resource_prefix }, '-cluster']}
      client_config: *gcp_config

  kubernetes-cluster-attributes:
    type: cloudify.gcp.nodes.KubernetesCluster
    properties:
      name: { concat: [ { get_input: resource_prefix }, '-cluster']}
      client_config: *gcp_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes-cluster

  kubernetes-cluster-node-pool:
    type: cloudify.gcp.nodes.KubernetesNodePool
    properties:
      name: { concat: [ { get_input: resource_prefix }, '-node-pool-1']}
      cluster_id: { get_property: [ kubernetes-cluster, name] }
      additional_settings:
        config:
          machineType: n1-standard-2
        initialNodeCount: 2
        autoscaling:
          enabled: true
          minNodeCount: 2
          maxNodeCount: 5
      client_config: *gcp_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes-cluster

  new_service_account:
    type: cloudify.kubernetes.resources.ServiceAccount
    properties:
      client_config: &kube_client_config
        authentication: 
          gcp_service_account: { get_secret: gcp_credentials }
        configuration:
          api_options:
            host: { concat: [ 'https://', { get_attribute: [kubernetes-cluster-attributes, endpoint] }]}
            verify_ssl: false
            debug: false
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: { get_input: service_account_name }
          namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes-cluster

  new_role_binding:
    type: cloudify.kubernetes.resources.RoleBinding
    properties:
      client_config: *kube_client_config
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: { get_input: service_account_name }
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: { get_input: service_account_name }
          namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes-cluster
      - type: cloudify.relationships.depends_on
        target: new_service_account

  secret:
    type: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
    properties:
      client_config: *kube_client_config
      use_external_resource: true
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: {get_attribute: [new_service_account, kubernetes, secrets, 0, name]}
      api_mapping:
        create:
          api: CoreV1Api
          method: create_namespaced_secret
          payload: V1Secret
        read:
          api: CoreV1Api
          method: read_namespaced_secret
        update:
          api: CoreV1Api
          method: replace_namespaced_secret
          payload: V1Secret
        delete:
          api: CoreV1Api
          method: delete_namespaced_secret
          payload: V1DeleteOptions
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes-cluster
      - type: cloudify.relationships.depends_on
        target: new_role_binding
      - type: cloudify.relationships.depends_on
        target: new_service_account
    interfaces:
      cloudify.interfaces.lifecycle:
        delete: {}

  store_token_and_kubeconfig:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/store_kube_token_and_config.py
          executor: central_deployment_agent
          inputs:
            kube_token: { get_attribute: [ secret, kubernetes, data, token ] }
            ssl_certificate: { get_attribute: [kubernetes-cluster-attributes, masterAuth, clusterCaCertificate] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: secret

  sanity_pod:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      client_config:
        authentication:
          gcp_service_account: { get_secret: gcp_credentials }
        configuration:
          api_options:
            host: { concat: [ 'https://', { get_attribute: [kubernetes-cluster-attributes, endpoint] }]}
            verify_ssl: false
            debug: false
      validate_resource_status: true
      file:
        resource_path: resources/template.yaml
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes-cluster-attributes
      - type: cloudify.relationships.depends_on
        target: kubernetes-cluster-node-pool
      - type: cloudify.relationships.depends_on
        target: kubernetes-cluster
    interfaces:
      cloudify.interfaces.lifecycle:
        precreate: {}
        create:
          implementation: kubernetes.cloudify_kubernetes.tasks.file_resource_create
        configure: {}
        start:
          implementation: kubernetes.cloudify_kubernetes.tasks.file_resource_delete
        poststart: {}
        prestop: {}
        stop: {}
        delete: {}
        postdelete: {}

capabilities:

  kubernetes_cluster_host:
    value: { concat: [ 'https://', { get_attribute: [kubernetes-cluster-attributes, endpoint] }]}

  token:
    value: { get_attribute: [ store_token_and_kubeconfig, token ] }

  ssl_ca_cert:
    value: { get_attribute: [ store_token_and_kubeconfig, ssl_ca_cert ] }

outputs:

  kubernetes_cluster_host:
    description: Endpoint
    value: { concat: [ 'https://', { get_attribute: [kubernetes-cluster-attributes, endpoint] }]}
