tosca_definitions_version: cloudify_dsl_1_4

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-aws-plugin

inputs:
  deployment_id:
    type: string
    display_label: Deployment ID
    description: Deployment ID of insfrastructure deployment

  ports:
    display_label: Ports list
    description: |
      Ports to open list
    type: list
    default: []

dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_capability: [{ get_input: deployment_id }, region_name ] }

node_templates:
  #generate rules for security group
  sg_rules:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/generate_bp.py
          executor: central_deployment_agent
          inputs:
            ports: { get_input: ports }
            provider: aws

  #security group instance
  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_capability: [ { get_input: deployment_id }, security_group_id ] }
      resource_config:
        GroupName: CloudifyGettingStartedExample
        Description: Created by cloudify-getting-started-example.
        VpcId: { get_capability: [ { get_input: deployment_id }, vpc_id ] }

  #setup the rules
  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        IpPermissions:
          get_attribute: [ sg_rules, value ]
    relationships:
      - type: cloudify.relationships.contained_in
        target: security_group
      - type: cloudify.relationships.depends_on
        target: sg_rules
