tosca_definitions_version: cloudify_dsl_1_4

description: Cloudify helm-kafka blueprint. Installs Kafka Helm chart on top of Kubernetes cluster.

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-helm-plugin
  - plugin:cloudify-kubernetes-plugin

inputs:

  release_name:
    display_label: Release Name
    description: |
      Name of the helm release
    type: string
    default: example

  zookeeper_user:
    display_label: Zookeeper User
    description: |
      Name of the zookeeper user
    type: string
    default: zkuser

  kafka_user:
    display_label: Kafka User
    description: |
      Name of the kafka user
    type: string
    default: kafkauser

  access_port:
    display_label: Access Port
    description: |
      The port number used for broker access
    type: string
    default: 9094

node_templates:

  password_jks:
    type: cloudify.nodes.PasswordSecret
    properties:
      length: 12
      uppercase: 0
      lowercase: 7
      digits: 2
      symbols: 3
      use_secret_if_exists: false

  password_zookeeper:
    type: cloudify.nodes.PasswordSecret
    properties:
      length: 12
      uppercase: 0
      lowercase: 7
      digits: 2
      symbols: 3
      use_secret_if_exists: false

  password_kafka:
    type: cloudify.nodes.PasswordSecret
    properties:
      length: 12
      uppercase: 0
      lowercase: 7
      digits: 2
      symbols: 3
      use_secret_if_exists: false

  helm_install:
    type: cloudify.nodes.helm.Binary
    properties:
      use_existing_resource: false
      installation_source: https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz

  repo:
    type: cloudify.nodes.helm.Repo
    properties:
      resource_config:
        name: bitnami
        repo_url: https://charts.bitnami.com/bitnami
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host

  release:
    type: cloudify.nodes.helm.Release
    properties:
      client_config:
        configuration:
          api_options:
            host: { get_environment_capability: kubernetes_cluster_host }
            api_key: { get_environment_capability: token }
            ssl_ca_cert: { get_environment_capability: ssl_ca_cert }
      resource_config:
        name: { get_input: release_name }
        chart: bitnami/kafka
        set_values:
          - name: replicaCount
            value: "2"
          - name: auth.clientProtocol
            value: sasl
          - name: auth.interBrokerProtocol
            value: tls
          - name: auth.tls.existingSecrets[0]
            value: kafka-jks-0
          - name: auth.tls.existingSecrets[1]
            value: kafka-jks-0
          - name: auth.tls.password
            value: { get_attribute: [password_jks, password] }
          - name: auth.sasl.jaas.clientUsers[0]
            value: { get_input: kafka_user }
          - name: auth.sasl.jaas.clientPasswords[0]
            value: { get_attribute: [password_kafka, password] }
          - name: auth.sasl.jaas.zookeeperUser
            value: { get_input: zookeeper_user }
          - name: auth.sasl.jaas.zookeeperPassword
            value: { get_attribute: [password_zookeeper, password] }
          - name: zookeeper.auth.enabled
            value: "true"
          - name: zookeeper.auth.serverUsers
            value: { get_input: zookeeper_user }
          - name: zookeeper.auth.serverPasswords
            value: { get_attribute: [password_zookeeper, password] }
          - name: zookeeper.auth.clientUser
            value: { get_input: zookeeper_user }
          - name: zookeeper.auth.clientPassword
            value: { get_attribute: [password_zookeeper, password] }
          - name: externalAccess.service.type
            value: LoadBalancer
          - name: externalAccess.enabled
            value: "true"
          - name: externalAccess.service.ports.external
            value: { get_input: access_port }
          - name: externalAccess.autoDiscovery.enabled
            value: "true"
          - name: serviceAccount.create
            value: "true"
          - name: rbac.create
            value: "true"
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host
      - target: repo
        type: cloudify.relationships.depends_on
      - target: password_zookeeper
        type: cloudify.relationships.depends_on
      - target: password_jks
        type: cloudify.relationships.depends_on
      - target: password_kafka
        type: cloudify.relationships.depends_on

  kafka-first:
    type: cloudify.kubernetes.resources.Service
    properties:
      client_config:
        configuration:
          api_options:
            host: { get_environment_capability: kubernetes_cluster_host }
            api_key: { get_environment_capability: token }
            ssl_ca_cert: { get_environment_capability: ssl_ca_cert }
      use_external_resource: true
      allow_node_redefinition: false
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: { concat: [{ get_input: release_name }, -kafka-0-external] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: release

  kafka-second:
    type: cloudify.kubernetes.resources.Service
    properties:
      client_config:
        configuration:
          api_options:
            host: { get_environment_capability: kubernetes_cluster_host }
            api_key: { get_environment_capability: token }
            ssl_ca_cert: { get_environment_capability: ssl_ca_cert }
      use_external_resource: true
      allow_node_redefinition: false
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: { concat: [{ get_input: release_name }, -kafka-1-external] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: release

labels:
  obj-type:
    values:
      - helm

capabilities:
  kafka_access_points:
    description: Access point to Kafka
    value:
      - concat:
          - get_attribute: [ kafka-first, kubernetes, status, load_balancer, ingress, 0, ip ]
          - ":"
          - get_input: access_port
      - concat:
          - get_attribute: [ kafka-second, kubernetes, status, load_balancer, ingress, 0, ip ]
          - ":"
          - get_input: access_port

  zookeeper_password:
    description: Zookeeper password
    value: { get_attribute: [ password_zookeeper, password ] }

  zookeeper_user:
    description: Zookeeper user
    value: { get_input: zookeeper_user }

  kafka_password:
    description: Kafka password
    value: { get_attribute: [ password_kafka, password ] }

  kafka_user:
    description: Kafka user
    value: { get_input: kafka_user }

  jks_password:
    description: JSK passowrd
    value: { get_attribute: [ password_jks, password ] }
