tosca_definitions_version: cloudify_dsl_1_4

description: Cloudify Hashicorp KeyVault blueprint. Deploys KeyVault service with Ansible Cloduify plugin.

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-ansible-plugin
  - plugin:cloudify-utilities-plugin

inputs:

  url_vault:
    display_label: URL for vault download
    description: >
      URL for downloading hashicorp vault archive
    type: string
    default: https://releases.hashicorp.com/vault/1.4.0/vault_1.4.0_linux_amd64.zip

  infra_name:
    display_label: Name of the provider to deploy resources
    description: >
      Name of infrastructure blueprint to deploy.
    type: string
    constraints:
      - valid_values:
          - azure
          - aws

  infra_archive:
    type: string
    display_label: URL for infra zip archive
    description: >
      URL of infra zip file.
    default: https://github.com/cloudify-community/cloudify-catalog/raw/6.4.0-build/tabs/other/multicloud/vm/vm.zip

  infra_exists:
    type: string
    display_label: Set if infra exists or not
    description: >
      Whether a getting started infrastructure blueprint has already been uploaded to the manager or not.
    default: false

node_templates:

  infrastructure:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: { get_input: infra_archive }
          main_file_name: blueprint.yaml
          external_resource: { get_input: infra_exists }
        deployment:
          inputs:
            provider_name: { get_input: infra_name }

  secrurity_group_rules:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: security_group.zip
          main_file_name: { concat: [ { get_input: infra_name }, .yaml ] }
          external_resource: false
        deployment:
          inputs:
            rg_id: { get_attribute: [ infrastructure, capabilities, rg_id ] }
            vpc_id: { get_attribute: [ infrastructure, capabilities, vpc_id ] }
            security_group_id: { get_attribute: [ infrastructure, capabilities, security_group_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure

  vault:
    type: cloudify.nodes.ansible.Playbook
    interfaces:
      cloudify.interfaces.lifecycle:
        precreate: {}
        create:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs: &ansible_inputs
            ansible_env_vars:
              ANSIBLE_FACT_PATH: /tmp/facts.d
            site_yaml_path: playbooks/install_vault.yaml
            sources:
              foo_group:
                hosts:
                  foo_host:
                    ansible_host: { get_attribute: [ infrastructure, capabilities, endpoint ] }
                    ansible_user: { get_attribute: [ infrastructure, capabilities, user ] }
                    ansible_ssh_private_key_file: { get_attribute: [ infrastructure, capabilities, key_content ] }
                    ansible_become: true
                    ansible_ssh_common_args: -o StrictHostKeyChecking=no
            run_data:
              url_vault: { get_input: url_vault }
        configure: {}
        start: {}
        poststart:
          implementation: ansible.cloudify_ansible.tasks.store_facts
          inputs: *ansible_inputs
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure

  secret:
    type: cloudify.nodes.secrets.Writer
    properties:
      entries:
        seals: { get_attribute: [ vault, facts, ansible_local, custom, seals ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vault

outputs:

  redis_endpoint:
    description: Vault Host IP
    value: { get_attribute: [ infrastructure, capabilities, endpoint ] }

  vault_port:
    description: Vault Port
    value: 8200