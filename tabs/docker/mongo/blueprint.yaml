tosca_definitions_version: cloudify_dsl_1_4

description: Cloudify Docker blueprint. Deploys Docker.

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-docker-plugin

inputs:

  infra_name:
    type: string
    display_label: Name of the provider to deploy resources
    description: >
      Name of infrastructure blueprint to deploy.
    constraints:
      - valid_values:
          - azure
          - aws

  infra_archive:
    type: string
    display_label: URL for infra zip archive
    description: >
      URL of infra zip file.
    default: https://github.com/cloudify-community/cloudify-catalog/raw/6.4.0-build/tabs/other/multicloud/vm/vm.zip

  infra_exists:
    type: string
    display_label: Set if infra exists or not 
    description: >
      Whether a getting started infrastructure blueprint has already been uploaded to the manager or not.
    default: false

  infra_deployment_id:
    type: string
    display_label: The infrastructure deployment id
    description: The blueprint name, the deployment name.
    default: { concat: [ 'infra-', { get_input: infra_name } ] }

  user_name:
    type: string
    display_label: The MongoDB user name
    description: The username to set for the system's initial super-user
    default: cloudify
  

node_templates:

  infrastructure:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: { get_input: infra_archive }
          main_file_name: blueprint.yaml
          external_resource: { get_input: infra_exists }
        deployment: 
          inputs: 
            provider_name: { get_input: infra_name }
  
  secrurity_group_rules:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: security_group.zip
          main_file_name: { concat: [ { get_input: infra_name }, .yaml ] }
          external_resource: false
        deployment:
          inputs:
            rg_id: { get_attribute: [ infrastructure, capabilities , rg_id ] }
            vpc_id: { get_attribute: [ infrastructure, capabilities , vpc_id ] }
            security_group_id: { get_attribute: [ infrastructure, capabilities , security_group_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure
  
  image:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_commands
          inputs:
            commands:
            - docker pull docker pull mongo:4.4.14
            fabric_env: &fabric_env
              host_string: { get_attribute: [ infrastructure, capabilities, endpoint ] }
              user: { get_attribute: [ infrastructure, capabilities, user ] }
              key: { get_attribute: [ infrastructure, capabilities, key_content ] }
            use_sudo: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure

  password_generator:
    type: cloudify.nodes.PasswordSecret
    properties:
      length: 12
      uppercase: 0
      lowercase: 7
      digits: 2
      symbols: 3
      use_secret_if_exists: false
    
  docker_redis_container:
    type: cloudify.nodes.docker.container
    properties:
      client_config:
        docker_host: { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, endpoint] }
        docker_rest_port: '2375'
      resource_config:
        image_tag: "mongo:4.4.14"
        container_args:
          name: mongodb
          environment: [
           { concat: [ "MONGO_INITDB_ROOT_PASSWORD=", { get_attribute: [ password_generator, password ] } ] }, 
           { concat: [ "MONGO_INITDB_ROOT_USERNAME=", { get_input: user_name } ] } 
          ]
          ports: 
            { '27017/tcp' : '27017' }
          host_config:
            restart_policy: { "MaximumRetryCount": 0,  "Name": "always" }
          detach: True
    relationships:
      - type: cloudify.relationships.depends_on
        target: image
      - type: cloudify.relationships.depends_on
        target: password_generator

outputs:
  docker_api_url:
    description: Administration console URL
    value: { concat: [ 'http://', { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, endpoint] }, ':2375' ] }
  
  mongodb_password:
    description: mongodb password
    value: { get_attribute: [ password_generator, password ] }
  
  mongodb_user:
    description: mongodb user
    value: { get_input: user_name}

  endpoint:
    description: mongodb endpoint
    value: { concat: [ { get_capability: [ { concat: [ get_attribute: [ infra_prefix, value ], "-", { get_input: infra_deployment_id } ] }, endpoint] }, ':27017' ] }
