tosca_definitions_version: cloudify_dsl_1_4

description: Cloudify Docker blueprint. Deploys Docker.

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-docker-plugin

inputs:

  infra_name:
    type: string
    display_label: Name of the provider to deploy resources
    description: >
      Name of infrastructure blueprint to deploy.
    constraints:
      - valid_values:
          - azure
          - aws

  infra_archive:
    type: string
    display_label: URL for infra zip archive
    description: >
      URL of infra zip file.
    default: https://github.com/cloudify-community/cloudify-catalog/raw/6.4.0-build/tabs/other/multicloud/vm/vm.zip

  infra_exists:
    type: string
    display_label: Set if infra exists or not 
    description: >
      Whether a getting started infrastructure blueprint has already been uploaded to the manager or not.
    default: false

  infra_deployment_id:
    type: string
    display_label: The infrastructure deployment id
    description: The blueprint name, the deployment name.
    default: { concat: [ 'infra-', { get_input: infra_name } ] }

node_templates:

  infrastructure:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: { get_input: infra_archive }
          main_file_name: blueprint.yaml
          external_resource: { get_input: infra_exists }
        deployment: 
          inputs: 
            provider_name: { get_input: infra_name }
  
  secrurity_group_rules:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          blueprint_archive: security_group.zip
          main_file_name: { concat: [ { get_input: infra_name }, .yaml ] }
          external_resource: false
        deployment:
          inputs:
            rg_id: { get_attribute: [ infrastructure, capabilities , rg_id ] }
            vpc_id: { get_attribute: [ infrastructure, capabilities , vpc_id ] }
            security_group_id: { get_attribute: [ infrastructure, capabilities , security_group_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure
  
  image:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_commands
          inputs:
            commands:
            - docker pull nginx:latest
            fabric_env: &fabric_env
              host_string: { get_attribute: [ infrastructure, capabilities, endpoint ] }
              user: { get_attribute: [ infrastructure, capabilities, user ] }
              key: { get_attribute: [ infrastructure, capabilities, key_content ] }
            use_sudo: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure

  docker_container_files:
    type: cloudify.nodes.docker.container_files
    properties:
      resource_config:
        docker_machine:
          docker_ip: { get_attribute: [ infrastructure, capabilities, endpoint ] }
          docker_user: { get_attribute: [ infrastructure, capabilities, user ] }
          docker_key: { get_attribute: [ infrastructure, capabilities, key_content ] }
        source: './templates.zip'
        destination: ''
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure

  docker_nginx_container:
    type: cloudify.nodes.docker.container
    properties:
      client_config:
        docker_host: { get_attribute: [ infrastructure, capabilities, endpoint ] }
        docker_rest_port: '2375'
      resource_config:
        image_tag: 'nginx:latest'
        container_args:
          command: "/docker-entrypoint.sh nginx -g 'daemon off;'"
          name: nginx
          detach: True
          volumes: 
            - '/usr/share/nginx/html'
          volumes_mapping: 
            -  get_attribute: [ docker_container_files, destination ]
          ports: 
            { '80/tcp' : '80' }
          host_config:
            port_bindings: { 80 : 80 }
            restart_policy: { 'MaximumRetryCount': 0,  'Name': 'always' }
    relationships:
      - type: cloudify.relationships.depends_on
        target: image
      - type: cloudify.relationships.depends_on
        target: docker_container_files

outputs:
  docker_api_url:
    description: Administration console URL
    value: { concat: [ 'http://', { get_attribute: [ infrastructure, capabilities, endpoint ] }, ':2375' ] }

  nginx_endpoint:
    description: Nginx URL
    value: { concat: [ 'http://', { get_attribute: [ infrastructure, capabilities, endpoint ] }, ':80' ] }
