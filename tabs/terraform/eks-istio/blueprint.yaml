tosca_definitions_version: cloudify_dsl_1_4

description: >
  This blueprint creates an EKS Cluster and install Istio on EKS
  using terraform as Environment that other deployment will leverage
  the cluster and Istio ingress

labels:
  csys-obj-type:
    values:
      - environment

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-terraform-plugin

inputs:

  region:
    type: string
    description: Name of the AWS region to deploy Resources
    display_label: Region Name
    default: us-east-1
    constraints:
      - valid_values:
        - us-east-1
        - us-west-1
        - ca-central-1
        - eu-west-1

# VPC Section

  vpc_name:
    type: string
    description: Name of the VPC
    display_label: VPC Name
    default: cfy-test-vpc

  vpc_cidr:
    type: string
    description: CIDR address for the VPC
    display_label: VPC CIDR
    default: 10.0.0.0/16

  private_subnets:
    type: list
    description: List of private subnets to create within the VPC
    display_label: Private Subnets
    default:
      - 10.0.1.0/24
      - 10.0.2.0/24
      - 10.0.3.0/24

  public_subnets:
    type: list
    description: List of public subnets to create within the VPC
    display_label: Public Subnets
    default:
      - 10.0.101.0/24
      - 10.0.102.0/24
      - 10.0.103.0/24

  database_subnets:
    type: list
    description: List of database subnets to create within the VPC
    display_label: Database Subnets
    default:
      - 10.0.201.0/24
      - 10.0.202.0/24
      - 10.0.203.0/24

# EKS Section

  cluster_name:
    type: string
    description: Name of the VPC cluster to deploy
    default: cfy-test-cluster
    display_label: Cluster Name

  kubernetes_version:
    type: string
    description: Version of Kubernetes to deploy
    display_label: Kubernetes Version
    default: "1.22"

  instance_type:
    type: string
    description: Managed node group instance size to use
    display_label: Instance Type
    default: t3.large

  node_group_name:
    type: string
    description: Name of the EKS managed node group
    display_label: Node Group Name
    default: cfy-test-nodes

  minimum_nodes:
    type: integer
    description: Minimum number of nodes in the node group
    display_label: Minimum Nodes
    default: 1

  maximum_nodes:
    type: integer
    description: Maximum number of nodes in the node group
    display_label: Maximum nodes
    default: 3

  desired_nodes:
    type: integer
    description: Desired number of nodes in the node group
    display_label: Desired nodes
    default: 1

node_templates:

  terraform:
    type: cloudify.nodes.terraform
    properties:
      resource_config:
        installation_source: https://releases.hashicorp.com/terraform/1.1.7/terraform_1.1.7_linux_amd64.zip

  vpc:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        source:
          location: templates/vpc.zip
        source_path: vpc
        variables:
          region: { get_input: region }
          vpc_name: { get_input: vpc_name }
          vpc_cidr: { get_input: vpc_cidr }
          private_subnets: { get_input: private_subnets }
          public_subnets: { get_input: public_subnets }
          database_subnets: { get_input: database_subnets }
          eks_cluster_name: {get_input: cluster_name}
        environment_variables:
          AWS_ACCESS_KEY_ID: {get_secret: aws_access_key_id}
          AWS_SECRET_ACCESS_KEY: {get_secret: aws_secret_access_key}
    relationships:
      - target: terraform
        type: cloudify.terraform.relationships.run_on_host

  eks_cluster:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        source:
          location: templates/eks.zip
        source_path: eks
        variables:
          region: { get_input: region }
          vpc_id: { get_attribute: [ vpc, outputs, vpc_id, value ] }
          cluster_name: { get_input: cluster_name }
          kubernetes_version: { get_input: kubernetes_version }
          instance_type: { get_input: instance_type }
          node_group_name: { get_input: node_group_name }
          minimum_nodes: { get_input: minimum_nodes }
          maximum_nodes: { get_input: maximum_nodes }
          desired_nodes: { get_input: desired_nodes }
          subnet_ids: { get_attribute: [ vpc, outputs, private_subnets, value ] }
        environment_variables:
          AWS_ACCESS_KEY_ID: {get_secret: aws_access_key_id}
          AWS_SECRET_ACCESS_KEY: {get_secret: aws_secret_access_key}
    relationships:
      - target: terraform
        type: cloudify.terraform.relationships.run_on_host
      - target: vpc
        type: cloudify.relationships.depends_on

  store_token:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/store_kube_token.py
          executor: central_deployment_agent
          inputs:
            kube_token: { get_attribute: [ eks_cluster, outputs, cluster_token, value ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: eks_cluster

  service_account:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        source:
          location: templates/service_account.zip
        source_path: service_account
        variables:
          cluster_endpoint: { get_attribute: [ eks_cluster, outputs, cluster_endpoint, value ] }
          cluster_certificate_authority: { get_attribute: [ eks_cluster, outputs, cluster_certificate_authority, value ] }
          cluster_token: { get_secret: kubernetes_token }
    relationships:
      - target: terraform
        type: cloudify.terraform.relationships.run_on_host
      - target: eks_cluster
        type: cloudify.relationships.depends_on

  update_token:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/store_kube_token.py
          executor: central_deployment_agent
          inputs:
            kube_token: { get_attribute: [ service_account, outputs, cluster_service_account_token, value ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: service_account

  istio:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        source:
          location: templates/istio.zip
        source_path: istio
        variables:
          cluster_endpoint: { get_attribute: [ eks_cluster, outputs, cluster_endpoint, value ] }
          cluster_certificate_authority: { get_attribute: [ eks_cluster, outputs, cluster_certificate_authority, value ] }
          cluster_token: { get_secret: kubernetes_token }
    relationships:
      - target: terraform
        type: cloudify.terraform.relationships.run_on_host
      - target: service_account
        type: cloudify.relationships.depends_on

capabilities:

  aws_region:
    value: { get_input: region }

  kubernetes_cluster_host:
    value: { get_attribute: [ eks_cluster, outputs, cluster_endpoint, value ] }

  ssl_ca_cert:
    value: { get_attribute: [ eks_cluster, outputs, cluster_certificate_authority, value ] }

  token:
    value: { get_attribute: [ service_account, outputs, cluster_service_account_token, value ] }

  istio_ingress:
    value: { get_attribute: [ istio, outputs, istio_ingress_gateway, value ] }
