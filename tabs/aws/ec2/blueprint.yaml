tosca_definitions_version: cloudify_dsl_1_4
description: >
  The blueprint generates SSH public and private keys and stores them in secret store.
  The public key is used to create Keypair that is attached to the created EC2 instance.
  In case case the SSH key already exists in the secret store they will be used.

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-aws-plugin
  - plugin:cloudify-utilities-plugin

inputs:

  agent_user:
    type: string
    display_label: VM username
    description: VM username to set in OS
    default: cloudify
  
  agent_key_name:
    type: string
    display_label: Agent key name for AWS
    default: agent_key

  region_name:
    type: string
    display_label: AWS Region Name
    description: Select AWS region name
    default: us-east-1
    constraints:
      - valid_values:
        - us-east-1 #US East (N. Virginia)
        - us-west-1 #US West (N. California)
        - us-west-2 #US West (Oregon)
        - ca-central-1  #Canada (Central)
        - eu-west-1 #Europe (Ireland)

  instance_type:
    description: Select instance size
    type: string
    display_label: Instance Type
    default: t2.micro
    constraints:
      - valid_values:
        - t2.micro
        - t2.small
        - t2.medium
        - t2.large  

  image_id:
    display_label: AMI AWS id
    description: The map between region and image id, it is used in EC2 instance to select the right image id per selected region
    type: dict
    default:
      ca-central-1: ami-033e6106180a626d0
      us-east-1: ami-03248a0341eadb1f1
      us-west-1: ami-01dd5a8ef26e6341d
      us-west-2: ami-024b56adf74074ca6
      eu-west-1: ami-0eee6eb870dc1cefa
    hidden: true
  
  subnet_zone: 
    display_label: AWS subnet zone
    description: The map between region and subnet zone
    type: dict
    default: 
      ca-central-1: b
      us-east-1: a
      us-west-1: a
      us-west-2: a
      eu-west-1: a
    hidden: true

  aws_credentials:
    display_label: The credentials for AWS
    description: The credentials for AWS
    type: dict
    default:
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      region_name: { get_input: region_name }
    hidden: true

node_templates:

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: { get_input: agent_key_name }
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true
  
  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
        - name: { get_input: agent_user }
          shell: /bin/bash
          sudo: ['ALL=(ALL) NOPASSWD:ALL']
          ssh-authorized-keys:
          - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: { get_input: aws_credentials}
      resource_config:
        CidrBlock: '10.0.0.0/16'
  
  internet_gateway:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: { get_input: aws_credentials}
    relationships:
    - type: cloudify.relationships.connected_to
      target: vpc

  subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        CidrBlock: 10.0.0.0/16
        AvailabilityZone: { concat: [ { get_input: region_name }, { get_input: [ subnet_zone, { get_input: region_name } ] } ] }
      client_config: { get_input: aws_credentials}
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc
  
  ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: { get_input: aws_credentials}
    relationships:
    - type: cloudify.relationships.depends_on
      target: nic

  nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: { get_input: aws_credentials}
      resource_config:
        kwargs:
          Description: Created by cloudify-getting-started-example.
          SubnetId: { get_attribute: [ subnet, aws_resource_id ] }
          Groups:
          - { get_attribute: [ security_group, aws_resource_id ] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: security_group
    - type: cloudify.relationships.depends_on
      target: subnet

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: { get_input: aws_credentials}
      resource_config:
        IpPermissions:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          IpRanges:
          - CidrIp: 0.0.0.0/0
    relationships:
    - type: cloudify.relationships.contained_in
      target: security_group

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      client_config: { get_input: aws_credentials}
      resource_config:
        GroupName: CloudifyGettingStartedExample
        Description: Created by cloudify-getting-started-example.
        VpcId: { get_attribute: [ vpc, aws_resource_id ] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  route_public_subnet_internet_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: { get_input: aws_credentials}
    relationships:
    - type: cloudify.relationships.contained_in
      target: routetable
    - type: cloudify.relationships.connected_to
      target: internet_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: { get_input: aws_credentials}
    relationships:
    - type: cloudify.relationships.contained_in
      target: vpc
    - type: cloudify.relationships.connected_to
      target: subnet

  vm:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      use_public_ip: true
      client_config: { get_input: aws_credentials}
      agent_config:
        install_method: none
        user: { get_input: agent_user }
        key: { get_attribute: [agent_key, private_key_export] }
      resource_config:
        InstanceType: { get_input: instance_type }
        ImageId: { get_input: [ image_id, { get_input: region_name } ] }
        kwargs:
          UserData: { get_attribute: [ cloud_init, cloud_config ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloud_init
      - type: cloudify.relationships.depends_on
        target: agent_key
      - type: cloudify.relationships.depends_on
        target: nic
      - type: cloudify.relationships.depends_on
        target: ip
  

labels:
  obj-type: 
    values: 
      - aws

capabilities:

  public_ip:
    description: The public ip of the EC2 instance
    value: { get_attribute: [ ip, aws_resource_id ] }

  private_key: 
    description: The private key for the EC2 instance
    value: { get_attribute: [agent_key, private_key_export] }