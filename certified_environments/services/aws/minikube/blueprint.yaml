tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/6.2.0/types.yaml
  - plugin:cloudify-fabric-plugin?version= >=2.0.7
  - plugin:cloudify-kubernetes-plugin?version= >=2.9.3
  - https://raw.githubusercontent.com/cloudify-community/eaas-example/master/utils/custom_types.yaml

labels:
  csys-obj-type:
    values:
      - service

inputs:
  resource_prefix:
    type: string
    description: The resource prefix for resources naming
    default: ''
    constraints:
      - pattern: '(^ *$)|(^[a-zA-Z][a-zA-Z0-9]+$)'

node_templates:
  prefix:
    type: eaas.nodes.UniquePrefixGenerator
    properties:
      predefined_value: { get_input: resource_prefix }

  network:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { concat: [ { get_attribute: [ prefix, value ] }, '-network' ] }
          blueprint_archive: https://github.com/cloudify-community/eaas-example/releases/download/2.0rc1/single_node.zip
          main_file_name: aws-blueprint.yaml
        deployment:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, dev-small, network, deployment ] }
          inputs: 
            resource_config: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, dev-small, network, inputs ] }
            resource_prefix: { get_attribute: [ prefix, value ] }
            cloud_credentials: { get_environment_capability: cloud_credentials }
          auto_inc_suffix: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: prefix

  docker:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/install-docker.sh
            fabric_env: &fabric_env
              host: { get_attribute: [ network, capabilities, k8s_vm_ip ] }
              user: centos
              connect_kwargs:
                pkey: { get_environment_capability: [ cloud_credentials, private_key_content ] }
        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/configure-docker.sh
            fabric_env: *fabric_env
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/start-docker.sh
            fabric_env: *fabric_env
        stop:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/stop-docker.sh
            fabric_env: *fabric_env
    relationships:
      - target: network
        type: cloudify.relationships.depends_on
  
  minikube:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/install-minikube.sh
            fabric_env: *fabric_env
        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/forward-port-to-minikube.sh
            fabric_env: *fabric_env
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/start-minikube.sh
            fabric_env: *fabric_env
            process:
              env:
                HOST_VM_IP: { get_attribute: [ network, capabilities, k8s_vm_ip ] }
        poststart:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/load-config.py
            fabric_env: *fabric_env
            process:
              env:
                HOST_VM_IP: { get_attribute: [ network, capabilities, k8s_vm_ip ] }
        stop:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/stop-minikube.sh
            fabric_env: *fabric_env
    relationships:
      - target: docker
        type: cloudify.relationships.depends_on

  kubernetes_master:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration: &kubernetes_master_configuration
        file_content: { get_attribute: [ minikube, config ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: minikube

  new_service_account:
    type: cloudify.kubernetes.resources.ServiceAccount
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: { concat: [ { get_attribute: [ prefix, value ] }, '-user' ] }
          namespace: default
      options:
        namespace: default
    relationships:
      - type: cloudify.relationships.depends_on
        target: prefix
      - type: cloudify.relationships.depends_on
        target: kubernetes_master

  new_role_binding:
    type: cloudify.kubernetes.resources.RoleBinding
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: { get_property: [ new_service_account, definition, metadata, name ] }
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - kind: ServiceAccount
            name: { get_property: [ new_service_account, definition, metadata, name ] }
            namespace: default
      options:
        namespace: default
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: new_service_account

  secret:
    type: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name:
            {
              get_attribute:
                [new_service_account, kubernetes, secrets, 0, name],
            }
      api_mapping:
        create:
          api: CoreV1Api
          method: create_namespaced_secret
          payload: V1Secret
        read:
          api: CoreV1Api
          method: read_namespaced_secret
        update:
          api: CoreV1Api
          method: replace_namespaced_secret
          payload: V1Secret
        delete:
          api: CoreV1Api
          method: delete_namespaced_secret
          payload: V1DeleteOptions
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: new_role_binding
      - type: cloudify.relationships.depends_on
        target: new_service_account
    interfaces:
      cloudify.interfaces.lifecycle:
        delete: {}

  store_token_and_kubeconfig:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/store_kube_token_and_config.py
          executor: central_deployment_agent
          inputs:
            kube_token: { get_attribute: [secret, kubernetes, data, token] }
            kube_config: { get_attribute: [minikube, config] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: minikube
      - type: cloudify.relationships.depends_on
        target: secret

capabilities:
  kubernetes_cluster_host:
    value: { get_attribute: [ minikube, config, clusters, 0, cluster, server ] }
  token:
    value: { get_attribute: [ store_token_and_kubeconfig, token ] }
  ssl_ca_cert:
    value: { get_attribute: [ store_token_and_kubeconfig, ssl_ca_cert ] }
  config:
    value: 
      file_content: { get_attribute: [ minikube, config ] }
