tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/6.2.0/types.yaml
  - plugin:cloudify-fabric-plugin?version= >=2.0.7
  - https://raw.githubusercontent.com/cloudify-community/eaas-example/master/utils/custom_types.yaml

inputs:
 resource_prefix:
    type: string
    default: ''
    constraints:
      - pattern: '(^ *$)|(^[a-zA-Z][a-zA-Z0-9]+$)'

labels:
  csys-obj-type:
    values:
      - service
  
node_templates:
  prefix:
    type: eaas.nodes.UniquePrefixGenerator
    properties:
      predefined_value: { get_input: resource_prefix }

  network:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, dev-small, network, blueprint ] }
          external_resource: true          
        deployment:
          id: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, dev-small, network, deployment ] }
          inputs: 
            resource_config: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, dev-small, network, inputs ] }
            resource_prefix: { get_attribute: [ prefix, value ] }
            cloud_credentials: { get_environment_capability: cloud_credentials }
          auto_inc_suffix: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: prefix

  database:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/install-psql.sh
            fabric_env: &fabric_env
              host: { get_attribute: [ network, capabilities, db_vm_ip ] }
              user: centos
              connect_kwargs:
                pkey:  { get_environment_capability: [cloud_credentials, private_key_content ] }
        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/configure-psql.sh
            fabric_env: *fabric_env
            master_username: { get_secret: [ eaas_params, { get_environment_capability: cloud_type }, dev-small, db, inputs, master_username ] }
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/start-psql.sh
            fabric_env: *fabric_env
        stop:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/stop-psql.sh
            fabric_env: *fabric_env
    relationships:
      - target: network
        type: cloudify.relationships.depends_on

capabilities:
  host:
    value: { get_attribute: [ network, capabilities, db_vm_ip ] }
  master_username:
    value: { get_attribute: [ database, master_username ] }
  master_password:
    value: { get_attribute: [ database, master_password ] }
