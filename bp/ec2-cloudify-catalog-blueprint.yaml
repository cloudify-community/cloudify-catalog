tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint deploy EC2 for UI system tests

imports:
  - http://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-aws-plugin?version= >=3.0.3
  - plugin:cloudify-utilities-plugin?version= >=1.22.1

inputs:

  aws_region_name:
    type: string
    default: 'eu-west-1'

  availability_zone:
    type: string
    default: 'eu-west-1b'

  instance_type:
    type: string
    default: t3.xlarge

  cloudify_manager_suffix:
    type: string
    default: "6.3.0-.dev1"

  aws_subnet_id:
    type: string
    default: 'subnet-0b1ee3a22252b15a0'
  
  aws_vpc_id:
    type: string
    default: 'vpc-0a5fea7a0a995dd38'

  aws_security_group_id:
    type: string
    default: 'sg-097fd8c55fe96166d'

  aws_fleet_role:
    display_label: AWS fleet role
    type: string
    default: "arn:aws:iam::263721492972:role/aws-ec2-spot-fleet-tagging-role"

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: 'centos'

  ssh_key_name:
    type: string
    default: 'system-ui-tests-key'

  agent_key_name:
    type: string
    default: agent_key


dsl_definitions:

   client_config: &client_config
    aws_access_key_id: { get_secret:  aws_access_key_id }
    aws_secret_access_key: { get_secret:  aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  cloudify_manager_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
            - Name: name
              Values:
              - { concat : [ "cloudify-manager-premium-", { get_input: cloudify_manager_suffix } ] }
      client_config: *client_config

  fleet:
    type: cloudify.nodes.aws.ec2.SpotFleetRequest
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          SpotFleetRequestConfig:
            IamFleetRole: { get_input: aws_fleet_role }
            AllocationStrategy: capacityOptimized
            TargetCapacity: 1
            TerminateInstancesWithExpiration: true
            Type: request
            LaunchSpecifications:

              - ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
                InstanceType: t3a.medium
                UserData: { get_attribute: [ cloud_init, cloud_config ] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.0326"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }
              
              - ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
                InstanceType: t3.medium
                UserData: { get_attribute: [ cloud_init, cloud_config ] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.0365"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }
              
              - ImageId:  { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
                InstanceType: t2.medium
                UserData: { get_attribute: [ cloud_init, cloud_config ] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.04"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }

              - ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
                InstanceType: t3a.large
                UserData: { get_attribute: [ cloud_init, cloud_config ] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.0652"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }

              - ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
                InstanceType: t3.large
                UserData: { get_attribute: [ cloud_init, cloud_config ] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.0729"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }

              - ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
                InstanceType: t2.large
                UserData: { get_attribute: [ cloud_init, cloud_config ] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.07"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }

              - ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
                InstanceType: t3a.xlarge
                UserData: { get_attribute: [ cloud_init, cloud_config ] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.075"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }

              - ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
                InstanceType: t3.xlarge
                UserData: { get_attribute: [ cloud_init, cloud_config ] }
                BlockDeviceMappings:
                  - DeviceName: "/dev/xvda"
                    Ebs:
                      DeleteOnTermination: true
                      VolumeSize: 30
                      Encrypted: false
                      VolumeType: gp2
                SpotPrice: "0.085"
                NetworkInterfaces:
                  - DeviceIndex: 0
                    AssociatePublicIpAddress: true
                    SubnetId: { get_input: aws_subnet_id }
                    Groups:
                      - { get_input: aws_security_group_id }
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloud_init
      - type: cloudify.relationships.depends_on
        target: vpc
      - type: cloudify.relationships.depends_on
        target: cloudify_manager_ami

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: aws_vpc_id }
      resource_config:
        CidrBlock: 10.20.0.0/24

  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      encode_base64: true
      resource_config:
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: [ALL=(ALL) NOPASSWD:ALL]
            ssh-authorized-keys:
              - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: { get_input: agent_key_name }
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  instance_details:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      client_config: *client_config
      use_external_resource: true
      use_public_ip: true
      resource_id: { get_attribute: [fleet, instance_ids, 0] }
      agent_config:
        install_method: none
        user: { get_input: agent_user }
        key: { get_attribute: [agent_key, private_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: fleet
      - type: cloudify.relationships.depends_on
        target: agent_key

capabilities:
  endpoint:
    description: The external endpoint of the application.
    value: { get_attribute: [instance_details, public_ip_address] }

  user:
    description: user ID.
    value: { get_input: agent_user }

  key_content:
    description: Private agent key
    value: { get_attribute: [agent_key, private_key_export] }